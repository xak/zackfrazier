/*!
Pure v0.6.0
Copyright 2014 Yahoo! Inc. All rights reserved.
Licensed under the BSD License.
https://github.com/yahoo/pure/blob/master/LICENSE.md
*//*!
normalize.css v^3.0 | MIT License | git.io/normalize
Copyright (c) Nicolas Gallagher and Jonathan Neal
*//*! normalize.css v3.0.2 | MIT License | git.io/normalize */hr,input[type=search]{-moz-box-sizing:content-box;box-sizing:content-box}img,legend{border:0}legend,td,th{padding:0}.pure-button:focus,a:active,a:hover{outline:0}.pure-table,table{border-spacing:0;border-collapse:collapse}html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}abbr[title]{border-bottom:1px dotted}b,optgroup,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{height:0}pre,textarea{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}.pure-button,input{line-height:normal}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;-webkit-box-sizing:content-box}.pure-button,.pure-form input:not([type]),.pure-menu{box-sizing:border-box;-webkit-box-sizing:border-box;-moz-box-sizing:border-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}.hidden,[hidden]{display:none!important}.pure-img{max-width:100%;height:auto;display:block}.pure-g{letter-spacing:-.31em;text-rendering:optimizespeed;font-family:FreeSans,Arimo,"Droid Sans",Helvetica,Arial,sans-serif;-webkit-flex-flow:row wrap;display:-ms-flexbox;-ms-flex-flow:row wrap;-ms-align-content:flex-start;-webkit-align-content:flex-start;align-content:flex-start}.pure-button,.pure-u{display:inline-block}.opera-only :-o-prefocus,.pure-g{word-spacing:-.43em}.pure-u{zoom:1;letter-spacing:normal;word-spacing:normal;vertical-align:top;text-rendering:auto}.pure-g [class*=pure-u]{font-family:sans-serif}.pure-u-1,.pure-u-1-1,.pure-u-1-12,.pure-u-1-2,.pure-u-1-24,.pure-u-1-3,.pure-u-1-4,.pure-u-1-5,.pure-u-1-6,.pure-u-1-8,.pure-u-10-24,.pure-u-11-12,.pure-u-11-24,.pure-u-12-24,.pure-u-13-24,.pure-u-14-24,.pure-u-15-24,.pure-u-16-24,.pure-u-17-24,.pure-u-18-24,.pure-u-19-24,.pure-u-2-24,.pure-u-2-3,.pure-u-2-5,.pure-u-20-24,.pure-u-21-24,.pure-u-22-24,.pure-u-23-24,.pure-u-24-24,.pure-u-3-24,.pure-u-3-4,.pure-u-3-5,.pure-u-3-8,.pure-u-4-24,.pure-u-4-5,.pure-u-5-12,.pure-u-5-24,.pure-u-5-5,.pure-u-5-6,.pure-u-5-8,.pure-u-6-24,.pure-u-7-12,.pure-u-7-24,.pure-u-7-8,.pure-u-8-24,.pure-u-9-24{display:inline-block;zoom:1;letter-spacing:normal;word-spacing:normal;vertical-align:top;text-rendering:auto}.pure-u-1-24{width:4.1667%}.pure-u-1-12,.pure-u-2-24{width:8.3333%}.pure-u-1-8,.pure-u-3-24{width:12.5%}.pure-u-1-6,.pure-u-4-24{width:16.6667%}.pure-u-1-5{width:20%}.pure-u-5-24{width:20.8333%}.pure-u-1-4,.pure-u-6-24{width:25%}.pure-u-7-24{width:29.1667%}.pure-u-1-3,.pure-u-8-24{width:33.3333%}.pure-u-3-8,.pure-u-9-24{width:37.5%}.pure-u-2-5{width:40%}.pure-u-10-24,.pure-u-5-12{width:41.6667%}.pure-u-11-24{width:45.8333%}.pure-u-1-2,.pure-u-12-24{width:50%}.pure-u-13-24{width:54.1667%}.pure-u-14-24,.pure-u-7-12{width:58.3333%}.pure-u-3-5{width:60%}.pure-u-15-24,.pure-u-5-8{width:62.5%}.pure-u-16-24,.pure-u-2-3{width:66.6667%}.pure-u-17-24{width:70.8333%}.pure-u-18-24,.pure-u-3-4{width:75%}.pure-u-19-24{width:79.1667%}.pure-u-4-5{width:80%}.pure-u-20-24,.pure-u-5-6{width:83.3333%}.pure-u-21-24,.pure-u-7-8{width:87.5%}.pure-u-11-12,.pure-u-22-24{width:91.6667%}.pure-u-23-24{width:95.8333%}.pure-u-1,.pure-u-1-1,.pure-u-24-24,.pure-u-5-5{width:100%}.pure-button{zoom:1;white-space:nowrap;vertical-align:middle;text-align:center;cursor:pointer;-webkit-user-drag:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;font-family:inherit;font-size:100%;padding:.5em 1em;color:#444;color:rgba(0,0,0,.8);border:1px solid #999;border:none transparent;background-color:#E6E6E6;text-decoration:none;border-radius:2px}.pure-button-hover,.pure-button:focus,.pure-button:hover{filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#1a000000', GradientType=0);background-image:-webkit-gradient(linear,0 0,0 100%,from(transparent),color-stop(40%,rgba(0,0,0,.05)),to(rgba(0,0,0,.1)));background-image:-webkit-linear-gradient(transparent,rgba(0,0,0,.05)40%,rgba(0,0,0,.1));background-image:-moz-linear-gradient(top,rgba(0,0,0,.05)0,rgba(0,0,0,.1));background-image:-o-linear-gradient(transparent,rgba(0,0,0,.05)40%,rgba(0,0,0,.1));background-image:linear-gradient(transparent,rgba(0,0,0,.05)40%,rgba(0,0,0,.1))}.pure-button-active,.pure-button:active{box-shadow:0 0 0 1px rgba(0,0,0,.15)inset,0 0 6px rgba(0,0,0,.2)inset}.pure-button-disabled,.pure-button-disabled:active,.pure-button-disabled:focus,.pure-button-disabled:hover,.pure-button[disabled]{border:none;background-image:none;filter:progid:DXImageTransform.Microsoft.gradient(enabled=false);filter:alpha(opacity=40);-khtml-opacity:.4;-moz-opacity:.4;opacity:.4;cursor:not-allowed;box-shadow:none}.pure-button-hidden{display:none}.pure-button::-moz-focus-inner{padding:0;border:0}.pure-button-primary,.pure-button-selected,a.pure-button-primary,a.pure-button-selected{background-color:#0078e7;color:#fff}.pure-form input[type=text],.pure-form input[type=password],.pure-form input[type=email],.pure-form input[type=url],.pure-form input[type=date],.pure-form input[type=month],.pure-form input[type=time],.pure-form input[type=datetime],.pure-form input[type=datetime-local],.pure-form input[type=week],.pure-form input[type=tel],.pure-form input[type=color],.pure-form input[type=number],.pure-form input[type=search],.pure-form select,.pure-form textarea{padding:.5em .6em;display:inline-block;border:1px solid #ccc;box-shadow:inset 0 1px 3px #ddd;border-radius:4px;vertical-align:middle;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.pure-form input:not([type]){padding:.5em .6em;display:inline-block;border:1px solid #ccc;box-shadow:inset 0 1px 3px #ddd;border-radius:4px}.pure-form input[type=color]{padding:.2em .5em}.pure-form input:not([type]):focus,.pure-form input[type=text]:focus,.pure-form input[type=password]:focus,.pure-form input[type=email]:focus,.pure-form input[type=url]:focus,.pure-form input[type=date]:focus,.pure-form input[type=month]:focus,.pure-form input[type=time]:focus,.pure-form input[type=datetime]:focus,.pure-form input[type=datetime-local]:focus,.pure-form input[type=week]:focus,.pure-form input[type=tel]:focus,.pure-form input[type=color]:focus,.pure-form input[type=number]:focus,.pure-form input[type=search]:focus,.pure-form select:focus,.pure-form textarea:focus{outline:0;border-color:#129FEA}.pure-form input[type=file]:focus,.pure-form input[type=checkbox]:focus,.pure-form input[type=radio]:focus{outline:#129FEA auto 1px}.pure-form .pure-checkbox,.pure-form .pure-radio{margin:.5em 0;display:block}.pure-form input:not([type])[disabled],.pure-form input[type=text][disabled],.pure-form input[type=password][disabled],.pure-form input[type=email][disabled],.pure-form input[type=url][disabled],.pure-form input[type=date][disabled],.pure-form input[type=month][disabled],.pure-form input[type=time][disabled],.pure-form input[type=datetime][disabled],.pure-form input[type=datetime-local][disabled],.pure-form input[type=week][disabled],.pure-form input[type=tel][disabled],.pure-form input[type=color][disabled],.pure-form input[type=number][disabled],.pure-form input[type=search][disabled],.pure-form select[disabled],.pure-form textarea[disabled]{cursor:not-allowed;background-color:#eaeded;color:#cad2d3}.pure-form input[readonly],.pure-form select[readonly],.pure-form textarea[readonly]{background-color:#eee;color:#777;border-color:#ccc}.pure-form input:focus:invalid,.pure-form select:focus:invalid,.pure-form textarea:focus:invalid{color:#b94a48;border-color:#e9322d}.pure-form input[type=file]:focus:invalid:focus,.pure-form input[type=checkbox]:focus:invalid:focus,.pure-form input[type=radio]:focus:invalid:focus{outline-color:#e9322d}.pure-form select{height:2.25em;border:1px solid #ccc;background-color:#fff}.pure-form select[multiple]{height:auto}.pure-form label{margin:.5em 0 .2em}.pure-form fieldset{margin:0;padding:.35em 0 .75em;border:0}.pure-form legend{display:block;width:100%;padding:.3em 0;margin-bottom:.3em;color:#333;border-bottom:1px solid #e5e5e5}.pure-form-stacked input:not([type]),.pure-form-stacked input[type=text],.pure-form-stacked input[type=password],.pure-form-stacked input[type=email],.pure-form-stacked input[type=url],.pure-form-stacked input[type=date],.pure-form-stacked input[type=month],.pure-form-stacked input[type=time],.pure-form-stacked input[type=datetime],.pure-form-stacked input[type=datetime-local],.pure-form-stacked input[type=week],.pure-form-stacked input[type=tel],.pure-form-stacked input[type=color],.pure-form-stacked input[type=file],.pure-form-stacked input[type=number],.pure-form-stacked input[type=search],.pure-form-stacked label,.pure-form-stacked select,.pure-form-stacked textarea{display:block;margin:.25em 0}.pure-form-aligned .pure-help-inline,.pure-form-aligned input,.pure-form-aligned select,.pure-form-aligned textarea,.pure-form-message-inline{display:inline-block;vertical-align:middle}.pure-form-aligned textarea{vertical-align:top}.pure-form-aligned .pure-control-group{margin-bottom:.5em}.pure-form-aligned .pure-control-group label{text-align:right;display:inline-block;vertical-align:middle;width:10em;margin:0 1em 0 0}.pure-form-aligned .pure-controls{margin:1.5em 0 0 11em}.pure-form .pure-input-rounded,.pure-form input.pure-input-rounded{border-radius:2em;padding:.5em 1em}.pure-form .pure-group fieldset{margin-bottom:10px}.pure-form .pure-group input,.pure-form .pure-group textarea{display:block;padding:10px;margin:0 0 -1px;border-radius:0;position:relative;top:-1px}.pure-form .pure-group input:focus,.pure-form .pure-group textarea:focus{z-index:3}.pure-form .pure-group input:first-child,.pure-form .pure-group textarea:first-child{top:1px;border-radius:4px 4px 0 0;margin:0}.pure-form .pure-group input:first-child:last-child,.pure-form .pure-group textarea:first-child:last-child{top:1px;border-radius:4px;margin:0}.pure-form .pure-group input:last-child,.pure-form .pure-group textarea:last-child{top:-2px;border-radius:0 0 4px 4px;margin:0}.pure-form .pure-group button{margin:.35em 0}.pure-form .pure-input-1{width:100%}.pure-form .pure-input-2-3{width:66%}.pure-form .pure-input-1-2{width:50%}.pure-form .pure-input-1-3{width:33%}.pure-form .pure-input-1-4{width:25%}.pure-form .pure-help-inline,.pure-form-message-inline{display:inline-block;padding-left:.3em;color:#666;vertical-align:middle;font-size:.875em}.pure-form-message{display:block;color:#666;font-size:.875em}@media only screen and (max-width :480px){.pure-form button[type=submit]{margin:.7em 0 0}.pure-form input:not([type]),.pure-form input[type=text],.pure-form input[type=password],.pure-form input[type=email],.pure-form input[type=url],.pure-form input[type=date],.pure-form input[type=month],.pure-form input[type=time],.pure-form input[type=datetime],.pure-form input[type=datetime-local],.pure-form input[type=week],.pure-form input[type=tel],.pure-form input[type=color],.pure-form input[type=number],.pure-form input[type=search],.pure-form label{margin-bottom:.3em;display:block}.pure-group input:not([type]),.pure-group input[type=text],.pure-group input[type=password],.pure-group input[type=email],.pure-group input[type=url],.pure-group input[type=date],.pure-group input[type=month],.pure-group input[type=time],.pure-group input[type=datetime],.pure-group input[type=datetime-local],.pure-group input[type=week],.pure-group input[type=tel],.pure-group input[type=color],.pure-group input[type=number],.pure-group input[type=search]{margin-bottom:0}.pure-form-aligned .pure-control-group label{margin-bottom:.3em;text-align:left;display:block;width:100%}.pure-form-aligned .pure-controls{margin:1.5em 0 0}.pure-form .pure-help-inline,.pure-form-message,.pure-form-message-inline{display:block;font-size:.75em;padding:.2em 0 .8em}}.pure-menu-fixed{position:fixed;left:0;top:0;z-index:3}.pure-menu-item,.pure-menu-list{position:relative}.pure-menu-list{list-style:none;margin:0;padding:0}.pure-menu-item{padding:0;margin:0;height:100%}.pure-menu-heading,.pure-menu-link{display:block;text-decoration:none;white-space:nowrap}.pure-menu-horizontal{width:100%;white-space:nowrap}.pure-menu-horizontal .pure-menu-list{display:inline-block}.pure-menu-horizontal .pure-menu-heading,.pure-menu-horizontal .pure-menu-item,.pure-menu-horizontal .pure-menu-separator{display:inline-block;zoom:1;vertical-align:middle}.pure-menu-item .pure-menu-item{display:block}.pure-menu-children{display:none;position:absolute;left:100%;top:0;margin:0;padding:0;z-index:3}.pure-menu-horizontal .pure-menu-children{left:0;top:auto;width:inherit}.pure-menu-active>.pure-menu-children,.pure-menu-allow-hover:hover>.pure-menu-children{display:block;position:absolute}.pure-menu-has-children>.pure-menu-link:after{padding-left:.5em;content:"\25B8";font-size:small}.pure-menu-horizontal .pure-menu-has-children>.pure-menu-link:after{content:"\25BE"}.pure-menu-scrollable{overflow-y:scroll;overflow-x:hidden}.pure-menu-scrollable .pure-menu-list{display:block}.pure-menu-horizontal.pure-menu-scrollable .pure-menu-list{display:inline-block}.pure-menu-horizontal.pure-menu-scrollable{white-space:nowrap;overflow-y:hidden;overflow-x:auto;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;padding:.5em 0}.pure-menu-horizontal.pure-menu-scrollable::-webkit-scrollbar{display:none}.pure-menu-separator{background-color:#ccc;height:1px;margin:.3em 0}.pure-menu-horizontal .pure-menu-separator{width:1px;height:1.3em;margin:0 .3em}.pure-menu-heading{text-transform:uppercase;color:#565d64}.pure-menu-link{color:#777}.pure-menu-children{background-color:#fff}.pure-menu-disabled,.pure-menu-heading,.pure-menu-link{padding:.5em 1em}.pure-menu-disabled{opacity:.5}.pure-menu-disabled .pure-menu-link:hover{background-color:transparent}.pure-menu-active>.pure-menu-link,.pure-menu-link:focus,.pure-menu-link:hover{background-color:#eee}.pure-menu-selected .pure-menu-link,.pure-menu-selected .pure-menu-link:visited{color:#000}.pure-table{empty-cells:show;border:1px solid #cbcbcb}.pure-table caption{color:#000;font:italic 85%/1 arial,sans-serif;padding:1em 0;text-align:center}.pure-table td,.pure-table th{border-left:1px solid #cbcbcb;border-width:0 0 0 1px;font-size:inherit;margin:0;overflow:visible;padding:.5em 1em}.pure-table td:first-child,.pure-table th:first-child{border-left-width:0}.pure-table thead{background-color:#e0e0e0;color:#000;text-align:left;vertical-align:bottom}.pure-table td{background-color:transparent}.pure-table-odd td,.pure-table-striped tr:nth-child(2n-1) td{background-color:#f2f2f2}.pure-table-bordered td{border-bottom:1px solid #cbcbcb}.pure-table-bordered tbody>tr:last-child>td{border-bottom-width:0}.pure-table-horizontal td,.pure-table-horizontal th{border-width:0 0 1px;border-bottom:1px solid #cbcbcb}.pure-table-horizontal tbody>tr:last-child>td{border-bottom-width:0}else if(typeof define==="function"&&define.amd){:define([],f)}else if(typeof global!=="undefined"){:g=global}else if(typeof self!=="undefined"){:g=self})(function(){:var define,module,exports;:if(!u&&a)return a(o,!0);:if(i)return i(o,!0);:var f=new Error("Cannot find module '"+o+"'");:throw f.code="MODULE_NOT_FOUND",f};t[o][0].call(l.exports,function(e){:var n=t[o][1][e];return s(n?n:e)})({:var EventPluginUtils = _dereq_(19);:var ReactChildren = _dereq_(32);:var ReactComponent = _dereq_(34);:var ReactClass = _dereq_(33);:var ReactContext = _dereq_(38);:var ReactCurrentOwner = _dereq_(39);:var ReactElement = _dereq_(57);:var ReactElementValidator = _dereq_(58);:var ReactDOM = _dereq_(40);:var ReactDOMTextComponent = _dereq_(51);:var ReactDefaultInjection = _dereq_(54);:var ReactInstanceHandles = _dereq_(66);:var ReactMount = _dereq_(70);:var ReactPerf = _dereq_(75);:var ReactPropTypes = _dereq_(78);:var ReactReconciler = _dereq_(81);:var ReactServerRendering = _dereq_(84);:var assign = _dereq_(27);:var findDOMNode = _dereq_(117);:var onlyChild = _dereq_(144);:ReactDefaultInjection.inject();:var createElement = ReactElement.createElement;:var createFactory = ReactElement.createFactory;:var cloneElement = ReactElement.cloneElement;:createFactory = ReactElementValidator.createFactory;:cloneElement = ReactElementValidator.cloneElement},Component: ReactComponent,DOM: ReactDOM,PropTypes: ReactPropTypes,initializeTouchEvents: function(shouldUseTouch){:EventPluginUtils.useTouchEvents = shouldUseTouch},createClass: ReactClass.createClass,cloneElement: cloneElement,createElement: createElement,createFactory: createFactory,createMixin: function(mixin){:// Currently a noop. Will be used to validate and trace mixins. return mixin}// shams Object.create,Array.prototype.every,Array.prototype.forEach,Array.prototype.indexOf,Array.prototype.map,Date.now,Function.prototype.bind,Object.freeze ]; for (var i = 0; i < expectedFeatures.length; i++),Object.keys,String.prototype.split,String.prototype.trim,var expectedFeatures = [ // shims Array.isArray{:break}2:[function(_dereq_,module,exports),]{'use strict':var focusNode = _dereq_(119)}{"119":119"108":108,"113":113,"133":133,"143":143,"154":154,"21":21,"4":4"12":12,"135":135,"149":149,"72":72"112":112,"114":114,"127":127,"135":135,"21":21"141":141"141":141,"15":15,"20":20,"70":70,"99":99"105":105,"120":120,"15":15,"17":17"130":130,"27":27,"28":28"117":117"104":104,"136":136,"15":15,"17":17,"18":18,"27":27,"61":61"44":44,"70":70"15":15,"25":25,"29":29,"33":33,"57":57"11":11,"135":135,"154":154,"2":2,"24":24,"27":27,"29":29,"33":33,"57":57,"87":87"27":27"17":17"154":154,"57":57"109":109,"119":119,"121":121,"50":50"106":106"140":140"58":58,"82":82"103":103,"135":135,"154":154,"27":27,"28":28,"39":39,"6":6,"75":75,"81":81"10":10"114":114,"125":125,"27":27,"28":28"101":101"95":95"107":107"139":139"152":152"135":135,"33":33,"57":57"110":110,"127":127,"135":135,"21":21}3:[function(_dereq_,module,exports),]{'use strict':var EventConstants = _dereq_(15);:var EventPropagators = _dereq_(20);:var ExecutionEnvironment = _dereq_(21);:var FallbackCompositionState = _dereq_(22);:var SyntheticCompositionEvent = _dereq_(93);:var SyntheticInputEvent = _dereq_(97);:var keyOf = _dereq_(141);:var END_KEYCODES =[9,13,27,32];:// Tab,Return,Esc,Space var START_KEYCODE = 229;:var canUseCompositionEvent =(ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window);:var documentMode = null}// Webkit offers a very useful `textInput` event that can be used to // directly represent `beforeInput`. The IE `textinput` event is not as // useful,so we don't use it.
var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !documentMode &&
  !isPresto()
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = (
  ExecutionEnvironment.canUseDOM &&
  (
    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)
  )
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

// Track whether we've ever handled a keypress on the space key. var hasSpaceKeypress = false; function isKeypressCommand(nativeEvent){:return((nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey)&& // ctrlKey && altKey is equivalent to AltGr,and is not a command. !(nativeEvent.ctrlKey && nativeEvent.altKey))}function getCompositionEventType(topLevelType){case topLevelTypes.topCompositionEnd:return eventTypes.compositionEnd;case topLevelTypes.topCompositionUpdate:return eventTypes.compositionUpdate}function isFallbackCompositionStart(topLevelType,nativeEvent){:return(topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE)}function isFallbackCompositionEnd(topLevelType,nativeEvent){case topLevelTypes.topKeyDown:// Expect IME keyCode on each keydown. If we get any other // code we must have exited earlier. return(nativeEvent.keyCode !== START_KEYCODE);case topLevelTypes.topKeyPress:case topLevelTypes.topMouseDown:case topLevelTypes.topBlur:// Events are not possible without cancelling IME. return true;default:return false}function getDataFromCustomEvent(nativeEvent){:var detail = nativeEvent.detail}// Track the current IME composition fallback object,if any. var currentComposition = null; function extractCompositionEvent( topLevelType,topLevelTarget,topLevelTargetID,nativeEvent ){:var eventType;:var fallbackData}else if (isFallbackCompositionEnd(topLevelType,nativeEvent)){:eventType = eventTypes.compositionEnd}if (!eventType){:return null}var event = SyntheticCompositionEvent.getPooled( eventType,topLevelTargetID,nativeEvent ); if (fallbackData){:// Inject data generated from fallback path into the synthetic event. // This matches the property of native CompositionEventInterface. event.data = fallbackData}function getNativeBeforeInputChars(topLevelType,nativeEvent){case topLevelTypes.topKeyPress:var which = nativeEvent.which}hasSpaceKeypress = true; return SPACEBAR_CHAR; case topLevelTypes.topTextInput: // Record the characters to be added to the DOM. var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes,so we need to blacklist it. if (chars === SPACEBAR_CHAR && hasSpaceKeypress){:return null}function getFallbackBeforeInputChars(topLevelType,nativeEvent){:FallbackCompositionState.release(currentComposition);:currentComposition = null;:return chars}switch (topLevelType){case topLevelTypes.topPaste:// If a paste event occurs after a keypress,throw out the input // chars. Paste events should not lead to BeforeInput events. return null}function extractBeforeInputEvent( topLevelType,topLevelTarget,topLevelTargetID,nativeEvent ){:var chars}// If no characters are being inserted,no BeforeInput event should // be fired. if (!chars){:return null}4:[function(_dereq_,module,exports),]{'use strict'}; function prefixKey(prefix,key){:return prefix + key.charAt(0).toUpperCase() + key.substring(1)},border:{borderWidth:true,borderStyle:true,borderColor:true},borderBottom:{borderBottomWidth:true,borderBottomStyle:true,borderBottomColor:true},borderLeft:{borderLeftWidth:true,borderLeftStyle:true,borderLeftColor:true},borderRight:{borderRightWidth:true,borderRightStyle:true,borderRightColor:true},borderTop:{borderTopWidth:true,borderTopStyle:true,borderTopColor:true},font:{fontStyle:true,fontVariant:true,fontWeight:true,fontSize:true,lineHeight:true,fontFamily:true}; var CSSProperty ={isUnitlessNumber:isUnitlessNumber,shorthandPropertyExpansions:shorthandPropertyExpansions}5:[function(_dereq_,module,exports),]{'use strict':var CSSProperty = _dereq_(4);:var ExecutionEnvironment = _dereq_(21);:var camelizeStyleName = _dereq_(108);:var dangerousStyleValue = _dereq_(113);:var hyphenateStyleName = _dereq_(133);:var memoizeStringOnly = _dereq_(143);:var warning = _dereq_(154)}if ("production" !== "development"){// 'msTransform' is correct,but the other prefixes should be capitalized var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;// style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== "development" ? warning(
      false,
      'Unsupported style property %s. Did you mean %s?',
      name,
      camelizeStyleName(name)
    ) : null);
  };

  var warnBadVendoredStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== "development" ? warning(
      false,
      'Unsupported vendor-prefixed style property %s. Did you mean %s?',
      name,
      name.charAt(0).toUpperCase() + name.slice(1)
    ) : null);
  };

  var warnStyleValueWithSemicolon = function(name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    ("production" !== "development" ? warning(
      false,
      'Style property values shouldn\'t contain a semicolon. ' +
      'Try "%s: %s" instead.',
      name,
      value.replace(badStyleValueWithSemicolonPattern, '')
    ) : null);
  };

  /**
   * @param {string} name
   * @param {*} value
   */
  var warnValidStyle = function(name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if ("production" !== "development") {
        warnValidStyle(styleName, styleValue);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';// Since plain JS classes are defined without any special initialization // logic,we can not catch common errors early. Therefore,we have to // catch them here,at initialization time,instead.("production" !== "development" ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved,'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?',this.getName() || 'a component'):null);("production" !== "development" ? warning(!inst.propTypes,'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.',this.getName() || 'a component'):null);("production" !== "development" ? warning(!inst.contextTypes,'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.',this.getName() || 'a component'):null);("production" !== "development" ? warning(typeof inst.componentShouldUpdate !== 'function','%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.'(this.getName() || 'A component')):null);("production" !== "development" ? warning(props.innerHTML == null,'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.'):null);("production" !== "development" ? warning(!props.contentEditable || props.children == null,'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.'):null);:ReactElementValidator.checkAndWarnForMutatedProps(nextElement)}6:[function(_dereq_,module,exports),]{'use strict':var PooledClass = _dereq_(28);:var assign = _dereq_(27);:var invariant = _dereq_(135);:this._contexts = null}assign(CallbackQueue.prototype,{:this._contexts = this._contexts ||[];:this._callbacks.push(callback);:this._contexts.push(context)},notifyAll: function(){:var callbacks = this._callbacks;:var contexts = this._contexts;:this._callbacks = null;:this._contexts = null;:for(var i = 0,l = callbacks.length;:i < l},reset: function(){:this._callbacks = null;:this._contexts = null}7:[function(_dereq_,module,exports),]{'use strict':var EventConstants = _dereq_(15);:var EventPluginHub = _dereq_(17);:var EventPropagators = _dereq_(20);:var ExecutionEnvironment = _dereq_(21);:var ReactUpdates = _dereq_(87);:var SyntheticEvent = _dereq_(95);:var isEventSupported = _dereq_(136);:var isTextInputElement = _dereq_(138);:var keyOf = _dereq_(141);:var topLevelTypes = EventConstants.topLevelTypes}),captured: keyOf({onChangeCapture:null;onSelectCapture:null;onBlurCapture:true;onClickCapture:true;onContextMenuCapture:true;onCopyCapture:true;onCutCapture:true;onDoubleClickCapture:true;onDragCapture:true;onDragEndCapture:true;onDragEnterCapture:true;onDragExitCapture:true;onDragLeaveCapture:true;onDragOverCapture:true;onDragStartCapture:true;onDropCapture:true;onFocusCapture:true;onInputCapture:true;onKeyDownCapture:true;onKeyPressCapture:true;onKeyUpCapture:true;onLoadCapture:true;onErrorCapture:true;onMouseDownCapture:true;onMouseMoveCapture:true;onMouseOutCapture:true;onMouseOverCapture:true;onMouseUpCapture:true;onPasteCapture:true;onResetCapture:true;onScrollCapture:true;onSubmitCapture:true;onTouchCancelCapture:true;onTouchEndCapture:true;onTouchMoveCapture:true;onTouchStartCapture:true;onWheelCapture:true}; var activeElement = null; var activeElementID = null; var activeElementValue = null; var activeElementValueProp = null; function shouldUseChangeEvent(elem){:return(elem.nodeName === 'SELECT' ||(elem.nodeName === 'INPUT' && elem.type === 'file'))}var doesChangeEventBubble = false; if (ExecutionEnvironment.canUseDOM){:// See `handleChange` comment below doesChangeEventBubble = isEventSupported('change')&&((!('documentMode' in document)|| document.documentMode > 8))}function manualDispatchChangeEvent(nativeEvent){:var event = SyntheticEvent.getPooled(eventTypes.change,activeElementID,nativeEvent);:EventPropagators.accumulateTwoPhaseDispatches(event)}// For IE8 and IE9. function handleEventsForInputEventIE( topLevelType,topLevelTarget,topLevelTargetID){:startWatchingForValueChange(topLevelTarget,topLevelTargetID)}else if (topLevelType === topLevelTypes.topBlur){:stopWatchingForValueChange()}markupList List of markup strings. * @internal */ processUpdates:function(updates,markupList){var update; // Mapping from parent IDs to initial child orderings. var initialChildren = null; // List of children that will be moved or removed. var updatedChildren = null; for (var i = 0; i < updates.length; i++){:update = updates[i];:var updatedChild = update.parentNode.childNodes[updatedIndex];:var parentID = update.parentID;("production" !== "development" ? invariant(updatedChild,'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.',updatedIndex,parentID):invariant(updatedChild))}}var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList); // Remove updated children first so that `toIndex` is consistent. if (updatedChildren){:for(var j = 0;:j < updatedChildren.length}for (var k = 0; k < updates.length; k++){:update = updates[k];:break;case ReactMultiChildUpdateTypes.MOVE_EXISTING:insertChildAt(update.parentNode,initialChildren[update.parentID][update.fromIndex],update.toIndex);:break;case ReactMultiChildUpdateTypes.TEXT_CONTENT:setTextContent(update.parentNode,update.textContent);:break;case ReactMultiChildUpdateTypes.REMOVE_NODE:// Already removed by the for-loop above. break}10:[function(_dereq_,module,exports),]{'use strict':var invariant = _dereq_(135)}; if (domPropertyConfig.isCustomAttribute){:DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute)}for (var propName in Properties){("production" !== "development" ? invariant(!DOMProperty.isStandardName.hasOwnProperty(propName),'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.',propName):invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));:DOMProperty.isStandardName[propName]= true;:var lowerCased = propName.toLowerCase();:DOMProperty.getPossibleStandardName[lowerCased]= propName;:DOMProperty.getPossibleStandardName[attributeName]= propName;:DOMProperty.getAttributeName[propName]= attributeName}DOMProperty.getPropertyName[propName] = DOMPropertyNames.hasOwnProperty(propName) ? DOMPropertyNames[propName] : propName; if (DOMMutationMethods.hasOwnProperty(propName)){:DOMProperty.getMutationMethod[propName]= DOMMutationMethods[propName]},_isCustomAttributeFunctions: [],isCustomAttribute: function(attributeName){:for(var i = 0;:i < DOMProperty._isCustomAttributeFunctions.length},getDefaultValueForProperty: function(nodeName,prop){:var nodeDefaults = defaultValueCache[nodeName];:var testElement}if (!(prop in nodeDefaults)){:testElement = document.createElement(nodeName);:nodeDefaults[prop]= testElement[prop]}11:[function(_dereq_,module,exports),]{'use strict':var DOMProperty = _dereq_(10);:var quoteAttributeValueForBrowser = _dereq_(147);:var warning = _dereq_(154)}var attributeName = DOMProperty.getAttributeName[name]; if (DOMProperty.hasBooleanValue[name] || (DOMProperty.hasOverloadedBooleanValue[name] && value === true)){:return attributeName}else if (shouldIgnoreValue(name,value)){:this.deleteValueForProperty(node,name)}else if (DOMProperty.mustUseAttribute[name]){:node.removeAttribute(DOMProperty.getAttributeName[name])}else if (DOMProperty.isCustomAttribute(name)){:node.removeAttribute(name)}12:[function(_dereq_,module,exports),]{'use strict':var ExecutionEnvironment = _dereq_(21);:var createNodesFromMarkup = _dereq_(112);:var emptyFunction = _dereq_(114);:var getMarkupWrap = _dereq_(127);:var invariant = _dereq_(135);:var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;:var RESULT_INDEX_ATTR = 'data-danger-index'}var Danger ={:var nodeName}; // Group markup by `nodeName` if a wrap is necessary,else by '*'. for (var i = 0; i < markupList.length; i++){("production" !== "development" ? invariant(markupList[i],'dangerouslyRenderMarkup(...): Missing markup.'):invariant(markupList[i]));:nodeName = getNodeName(markupList[i]);nodeName = getMarkupWrap(nodeName) ? nodeName:'*';:markupByNodeName[nodeName]= markupByNodeName[nodeName]||[];:markupByNodeName[nodeName][i]= markupList[i]}else if ("production" !== "development"){:console.error('Danger: Discarding unexpected node:',renderNode)},dangerouslyReplaceNodeWithMarkup: function(oldChild,markup){("production" !== "development" ? invariant(ExecutionEnvironment.canUseDOM,'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'React.renderToString for server rendering.'):invariant(ExecutionEnvironment.canUseDOM));("production" !== "development" ? invariant(markup,'dangerouslyReplaceNodeWithMarkup(...): Missing markup.'):invariant(markup));("production" !== "development" ? invariant(oldChild.tagName.toLowerCase() !== 'html','dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See React.renderToString().'):invariant(oldChild.tagName.toLowerCase()!== 'html'));:var newChild = createNodesFromMarkup(markup,emptyFunction)[0];:oldChild.parentNode.replaceChild(newChild,oldChild)}13:[function(_dereq_,module,exports),]{'use strict':var keyOf = _dereq_(141)}),keyOf({SimpleEventPlugin:null;TapEventPlugin:null;EnterLeaveEventPlugin:null;ChangeEventPlugin:null;SelectEventPlugin:null;BeforeInputEventPlugin:null;AnalyticsEventPlugin:null;MobileSafariClickEventPlugin:null}14:[function(_dereq_,module,exports),]{'use strict':var EventConstants = _dereq_(15);:var EventPropagators = _dereq_(20);:var SyntheticMouseEvent = _dereq_(99);:var ReactMount = _dereq_(70);:var keyOf = _dereq_(141);:var topLevelTypes = EventConstants.topLevelTypes;:var getFirstReactDOM = ReactMount.getFirstReactDOM}if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver){:// Must not be a mouse in or mouse out - ignoring. return null}var win; if (topLevelTarget.window === topLevelTarget){:// `topLevelTarget` is probably a window object. win = topLevelTarget}else{// TODO:Figure out why `ownerDocument` is sometimes undefined in IE8 var doc = topLevelTarget.ownerDocument;// Firefox needs to capture a different mouse scroll event. // @see http://www.quirksmode.org/dom/events/tests/scroll.html ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel,'DOMMouseScroll',mountAt);("production" !== "development" ? warning(false,'Failed Context Types: %s%s',error.message,addendum):null);("production" !== "development" ? warning(false,'ReactMount: Root element has been removed from its original ' + 'container. New container:',rootElement.parentNode):null);("production" !== "development" ? invariant(container.nodeType !== DOC_NODE_TYPE,'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s',difference):invariant(container.nodeType !== DOC_NODE_TYPE));:node.innerHTML = markup}to; if (topLevelType === topLevelTypes.topMouseOut),var from{:from = topLevelTarget;:to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement)|| win}if (from === to){:// Nothing pertains to our managed components. return null}15:[function(_dereq_,module,exports),]{'use strict':var keyMirror = _dereq_(140)}); var topLevelTypes = keyMirror({topBlur:null,topChange:null,topClick:null,topCompositionEnd:null,topCompositionStart:null,topCompositionUpdate:null,topContextMenu:null,topCopy:null,topCut:null,topDoubleClick:null,topDrag:null,topDragEnd:null,topDragEnter:null,topDragExit:null,topDragLeave:null,topDragOver:null,topDragStart:null,topDrop:null,topError:null,topFocus:null,topInput:null,topKeyDown:null,topKeyPress:null,topKeyUp:null,topLoad:null,topMouseDown:null,topMouseMove:null,topMouseOut:null,topMouseOver:null,topMouseUp:null,topPaste:null,topReset:null,topScroll:null,topSelectionChange:null,topSubmit:null,topTextInput:null,topTouchCancel:null,topTouchEnd:null,topTouchMove:null,topTouchStart:null,topWheel:null}); var EventConstants ={topLevelTypes:topLevelTypes,PropagationPhases:PropagationPhases}16:[function(_dereq_,module,exports),]{:var emptyFunction = _dereq_(114)}else if (target.attachEvent){:target.attachEvent('on' + eventType,callback)}return{remove:emptyFunction}17:[function(_dereq_,module,exports),]{'use strict':var EventPluginRegistry = _dereq_(18);:var EventPluginUtils = _dereq_(19);:var accumulateInto = _dereq_(105);:var forEachAccumulated = _dereq_(120);:var invariant = _dereq_(135)}; var eventQueue = null; var executeDispatchesAndRelease = function(event){:// Plugins can provide custom behavior when dispatching events. var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event)}EventPluginUtils.executeDispatchesInOrder(event,executeDispatch); if (!event.isPersistent()){:event.constructor.release(event)}; var InstanceHandle = null; function validateInstanceHandle(){:var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;("production" !== "development" ? invariant(valid,'InstanceHandle not injected before use!'):invariant(valid))},eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,putListener: function(id,registrationName,listener),registrationNameModules: EventPluginRegistry.registrationNameModules{("production" !== "development" ? invariant(!listener || typeof listener === 'function','Expected %s listener to be a function, instead got type %s',registrationName,typeof listener):invariant(!listener || typeof listener === 'function'))},getListener: function(id,registrationName){:var bankForRegistrationName = listenerBank[registrationName];:return bankForRegistrationName && bankForRegistrationName[id]},deleteListener: function(id,registrationName){:var bankForRegistrationName = listenerBank[registrationName]},processEventQueue: function(){:// Set `eventQueue` to null before processing it so that we can tell if more // events get enqueued while processing. var processingEventQueue = eventQueue;:eventQueue = null;:forEachAccumulated(processingEventQueue,executeDispatchesAndRelease);("production" !== "development" ? invariant(!eventQueue,'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.'):invariant(!eventQueue))},__getListenerBank: function(){:return listenerBank}18:[function(_dereq_,module,exports),]{'use strict':var invariant = _dereq_(135);:var EventPluginOrder = null}for (var pluginName in namesToPlugins){:var PluginModule = namesToPlugins[pluginName];:var pluginIndex = EventPluginOrder.indexOf(pluginName);("production" !== "development" ? invariant(pluginIndex > -1,'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.',pluginName):invariant(pluginIndex > -1))}("production" !== "development" ? invariant( PluginModule.extractEvents,'EventPluginRegistry: Event plugins must implement an `extractEvents` '+'method, but `%s` does not.',pluginName ) : invariant(PluginModule.extractEvents)); EventPluginRegistry.plugins[pluginIndex] = PluginModule; var publishedEvents = PluginModule.eventTypes; for (var eventName in publishedEvents){("production" !== "development" ? invariant(publishEventForPlugin(publishedEvents[eventName],PluginModule,eventName),'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',eventName,pluginName):invariant(publishEventForPlugin(publishedEvents[eventName],PluginModule,eventName)))}function publishEventForPlugin(dispatchConfig,PluginModule,eventName){("production" !== "development" ? invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.',eventName):invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));:EventPluginRegistry.eventNameDispatchConfigs[eventName]= dispatchConfig;:var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;:publishRegistrationName(phasedRegistrationName,PluginModule,eventName)}else if (dispatchConfig.registrationName){:publishRegistrationName(dispatchConfig.registrationName,PluginModule,eventName);:return true}function publishRegistrationName(registrationName,PluginModule,eventName){("production" !== "development" ? invariant(!EventPluginRegistry.registrationNameModules[registrationName],'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.',registrationName):invariant(!EventPluginRegistry.registrationNameModules[registrationName]));:EventPluginRegistry.registrationNameModules[registrationName]= PluginModule;:EventPluginRegistry.registrationNameDependencies[registrationName]= PluginModule.eventTypes[eventName].dependencies},injectEventPluginOrder: function(InjectedEventPluginOrder){("production" !== "development" ? invariant(!EventPluginOrder,'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.'):invariant(!EventPluginOrder));:// Clone the ordering so it cannot be dynamically mutated. EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);:recomputePluginOrdering()},injectEventPluginsByName: function(injectedNamesToPlugins){:var isOrderingDirty = false}var PluginModule = injectedNamesToPlugins[pluginName]; if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule){("production" !== "development" ? invariant(!namesToPlugins[pluginName],'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.',pluginName):invariant(!namesToPlugins[pluginName]));:namesToPlugins[pluginName]= PluginModule;:isOrderingDirty = true}if (isOrderingDirty){:recomputePluginOrdering()},getPluginModuleForEvent: function(event){:var dispatchConfig = event.dispatchConfig}var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase] ]; if (PluginModule){:return PluginModule},_resetEventPlugins: function(){:EventPluginOrder = null}19:[function(_dereq_,module,exports),]{'use strict':var EventConstants = _dereq_(15);:var invariant = _dereq_(135)}; var topLevelTypes = EventConstants.topLevelTypes; function isEndish(topLevelType){:return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel}function isMoveish(topLevelType){:return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove}function isStartish(topLevelType){:return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart}var validateEventDispatches; if ("production" !== "development"){:var dispatchIDs = event._dispatchIDs;:var listenersIsArr = Array.isArray(dispatchListeners);:var idsIsArr = Array.isArray(dispatchIDs);var IDsLen = idsIsArr ? dispatchIDs.length:dispatchIDs ? 1:0;var listenersLen = listenersIsArr ? dispatchListeners.length:dispatchListeners ? 1:0;("production" !== "development" ? invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen,'EventPluginUtils: Invalid `event`.'):invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen))}function executeDispatchesInOrderStopAtTrueImpl(event),function forEachEventDispatch(event,cb){:var dispatchListeners = event._dispatchListeners;:var dispatchIDs = event._dispatchIDs}else if (dispatchListeners){:cb(event,dispatchListeners,dispatchIDs)}function executeDispatch(event,listener,domID){:event.currentTarget = injection.Mount.getNode(domID);:var returnValue = listener(event,domID);:event.currentTarget = null;:return returnValue}function executeDispatchesInOrder(event,cb){:forEachEventDispatch(event,cb);:event._dispatchListeners = null;:event._dispatchIDs = null}if (Array.isArray(dispatchListeners)){:for(var i = 0;:i < dispatchListeners.length}// Listeners and IDs are two parallel arrays that are always in sync. if (dispatchListeners[i](event,dispatchIDs[i])){:return dispatchIDs[i]}function executeDispatchesInOrderStopAtTrue(event){:var ret = executeDispatchesInOrderStopAtTrueImpl(event);:event._dispatchIDs = null;:event._dispatchListeners = null;:return ret}function hasDispatches(event){:return !!event._dispatchListeners}var EventPluginUtils ={isEndish:isEndish,isMoveish:isMoveish,isStartish:isStartish,executeDirectDispatch:executeDirectDispatch,executeDispatch:executeDispatch,executeDispatchesInOrder:executeDispatchesInOrder,executeDispatchesInOrderStopAtTrue:executeDispatchesInOrderStopAtTrue,hasDispatches:hasDispatches,injection:injection,useTouchEvents:false}20:[function(_dereq_,module,exports),]{'use strict':var EventConstants = _dereq_(15);:var EventPluginHub = _dereq_(17);:var accumulateInto = _dereq_(105);:var forEachAccumulated = _dereq_(120);:var PropagationPhases = EventConstants.PropagationPhases;:var getListener = EventPluginHub.getListener;:return getListener(id,registrationName)}var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured; var listener = listenerAtPhase(domID,event,phase); if (listener){:event._dispatchListeners = accumulateInto(event._dispatchListeners,listener);:event._dispatchIDs = accumulateInto(event._dispatchIDs,domID)}function accumulateDispatches(id,ignoredDirection,event){:var listener = getListener(id,registrationName);:event._dispatchIDs = accumulateInto(event._dispatchIDs,id)}function accumulateTwoPhaseDispatches(events){:forEachAccumulated(events,accumulateTwoPhaseDispatchesSingle)}function accumulateEnterLeaveDispatches(leave,enter,fromID,toID){:EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID,toID,accumulateDispatches,leave,enter)}function accumulateDirectDispatches(events){:forEachAccumulated(events,accumulateDirectDispatchesSingle)}var EventPropagators ={accumulateTwoPhaseDispatches:accumulateTwoPhaseDispatches,accumulateDirectDispatches:accumulateDirectDispatches,accumulateEnterLeaveDispatches:accumulateEnterLeaveDispatches}21:[function(_dereq_,module,exports),]{"use strict":var canUseDOM = !!((typeof window !== 'undefined' && window.document && window.document.createElement))}22:[function(_dereq_,module,exports),]{'use strict':var PooledClass = _dereq_(28);:var assign = _dereq_(27);:var getTextContentAccessor = _dereq_(130);:this._startText = this.getText();:this._fallbackText = null}23:[function(_dereq_,module,exports),]{'use strict':var DOMProperty = _dereq_(10);:var ExecutionEnvironment = _dereq_(21);:var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;:var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;:var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;:var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;:var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;:var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;:var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;:var hasSVG;:hasSVG =(implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure','1.1'))}28:[function(_dereq_,module,exports),]{'use strict':var invariant = _dereq_(135);:Klass.call(instance,copyFieldsFrom);:return instance}; var twoArgumentPooler = function(a1,a2){:var Klass = this;:Klass.call(instance,a1,a2);:return instance}; var threeArgumentPooler = function(a1,a2,a3){:var Klass = this;:Klass.call(instance,a1,a2,a3);:return instance}; var fiveArgumentPooler = function(a1,a2,a3,a4,a5){:var Klass = this;:Klass.call(instance,a1,a2,a3,a4,a5);:return instance}; var standardReleaser = function(instance){:var Klass = this;("production" !== "development" ? invariant(instance instanceof Klass,'Trying to release an instance into a pool of a different type.'):invariant(instance instanceof Klass))}if (Klass.instancePool.length < Klass.poolSize){:Klass.instancePool.push(instance)}; var DEFAULT_POOL_SIZE = 10; var DEFAULT_POOLER = oneArgumentPooler; var addPoolingTo = function(CopyConstructor,pooler){:var NewKlass = CopyConstructor;:NewKlass.instancePool =[];:NewKlass.getPooled = pooler || DEFAULT_POOLER}; var PooledClass ={addPoolingTo:addPoolingTo,oneArgumentPooler:oneArgumentPooler,twoArgumentPooler:twoArgumentPooler,threeArgumentPooler:threeArgumentPooler,fiveArgumentPooler:fiveArgumentPooler}29:[function(_dereq_,module,exports),]{'use strict':var findDOMNode = _dereq_(117)}30:[function(_dereq_,module,exports),]{'use strict':var EventConstants = _dereq_(15);:var EventPluginHub = _dereq_(17);:var EventPluginRegistry = _dereq_(18);:var ReactEventEmitterMixin = _dereq_(61);:var ViewportMetrics = _dereq_(104);:var assign = _dereq_(27);:var isEventSupported = _dereq_(136)}; var isMonitoringScrollValue = false; var reactTopListenersCounter = 0; // For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here var topEventMapping ={topBlur:'blur',topChange:'change',topClick:'click',topCompositionEnd:'compositionend',topCompositionStart:'compositionstart',topCompositionUpdate:'compositionupdate',topContextMenu:'contextmenu',topCopy:'copy',topCut:'cut',topDoubleClick:'dblclick',topDrag:'drag',topDragEnd:'dragend',topDragEnter:'dragenter',topDragExit:'dragexit',topDragLeave:'dragleave',topDragOver:'dragover',topDragStart:'dragstart',topDrop:'drop',topFocus:'focus',topInput:'input',topKeyDown:'keydown',topKeyPress:'keypress',topKeyUp:'keyup',topMouseDown:'mousedown',topMouseMove:'mousemove',topMouseOut:'mouseout',topMouseOver:'mouseover',topMouseUp:'mouseup',topPaste:'paste',topScroll:'scroll',topSelectionChange:'selectionchange',topTextInput:'textInput',topTouchCancel:'touchcancel',topTouchEnd:'touchend',topTouchMove:'touchmove',topTouchStart:'touchstart',topWheel:'wheel'}contentDocumentHandle Document which owns the container */ listenTo: function(registrationName,contentDocumentHandle){:var mountAt = contentDocumentHandle;:var isListening = getListeningForDocument(mountAt);:var dependencies = EventPluginRegistry. registrationNameDependencies[registrationName];:var topLevelTypes = EventConstants.topLevelTypes;:for(var i = 0,l = dependencies.length;:i < l}else if (isEventSupported('mousewheel')){:ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel,'mousewheel',mountAt)}else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur){:ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur,'blur',mountAt)}else if (isEventSupported('focusin')){// IE has `focusin` and `focusout` events which bubble. // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus,'focusin',mountAt);:ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur,'focusout',mountAt)}else if (topEventMapping.hasOwnProperty(dependency)){:ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency,topEventMapping[dependency],mountAt)},trapBubbledEvent: function(topLevelType,handlerBaseName,handle){:return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType,handlerBaseName,handle)},trapCapturedEvent: function(topLevelType,handlerBaseName,handle){:return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType,handlerBaseName,handle)},ensureScrollValueMonitoring: function(){:ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);:isMonitoringScrollValue = true}31:[function(_dereq_,module,exports),]{'use strict':var ReactReconciler = _dereq_(81);:var flattenChildren = _dereq_(118);:var instantiateReactComponent = _dereq_(134);:var shouldUpdateReactComponent = _dereq_(151);// The rendered children must be turned into instances as they're
        // mounted.
        var childInstance = instantiateReactComponent(child, null);
        children[name] = childInstance;
      }
    }
    return children;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextNestedChildNodes Nested child maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function(
    prevChildren,
    nextNestedChildNodes,
    transaction,
    context) {
    // We currently don't have a way to track moves here but if we use iterators // instead of for..in we can zip the iterators and check if an item has // moved. // TODO:If nothing has changed,return the prevChildren object so that we // can quickly bailout if nothing has changed. var nextChildren = flattenChildren(nextNestedChildNodes)}var prevChild = prevChildren && prevChildren[name]; var prevElement = prevChild && prevChild._currentElement; var nextElement = nextChildren[name]; if (shouldUpdateReactComponent(prevElement,nextElement)){:ReactReconciler.receiveComponent(prevChild,nextElement,transaction,context);:nextChildren[name]= prevChild},mixins: function(Constructor,mixins){:i < mixins.length},statics: function(Constructor,statics){:mixStaticSpecIntoComponent(Constructor,statics)}; function validateTypeDef(Constructor,typeDef,location){it must be a function,usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactClass',
        ReactPropTypeLocationNames[location],
        propName
      ) : null);
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
    ReactClassInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactClassInterface:You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactClassInterface:You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== "development" ? invariant(
    typeof spec !== 'function',
    'ReactClass:You\'re attempting to ' +
    'use a component class as a mixin. Instead,just use a regular object.'
  ) : invariant(typeof spec !== 'function'));
  ("production" !== "development" ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactClass:You\'re attempting to ' +
    'use a component as a mixin. Instead,just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod =
        ReactClassInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isReactClassMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== "development" ? invariant(
            isReactClassMethod && (
              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
            ),
            'ReactClass:Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isReactClassMethod && (
            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== "development") {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== "development" ? invariant(
      !isReserved,
      'ReactClass:You are attempting to define a reserved ' +
      'property,`%s`,that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead;it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== "development" ? invariant(
      !isInherited,
      'ReactClass:You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  ("production" !== "development" ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeIntoWithNoDuplicateKeys():Cannot merge non-objects.'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      ("production" !== "development" ? invariant(
        one[key] === undefined,
        'mergeIntoWithNoDuplicateKeys():' +
        'Tried to merge two objects with the same key:`%s`. This conflict ' +
        'may be due to a mixin}else if (!args.length){("production" !== "development" ? warning(false,'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s',componentName):null);:return boundMethod}function bindAutoBindMethods(component){:component[autoBindKey]= bindAutoBindMethod(component,ReactErrorUtils.guard(method,component.constructor.displayName + '.' + autoBindKey))}var typeDeprecationDescriptor ={("production" !== "development" ? warning(false,'%s.type is deprecated. Use %s directly to access the class.',displayName,displayName):null)},isMounted: function(){:owner._warnedAboutRefsInRender = true},setProps: function(partialProps,callback){:ReactUpdateQueue.enqueueSetProps(this,partialProps)},replaceProps: function(newProps,callback){:ReactUpdateQueue.enqueueReplaceProps(this,newProps)}// Wire up auto-binding if (this.__reactAutoBindMap){:bindAutoBindMethods(this)}this.props = props; this.context = context; this.state = null; // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if ("production" !== "development") {
        // We allow auto-mocks to proceed as if they're returning null. if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction){:// This is probably bad practice. Consider warning here and // deprecating this convenience. initialState = null}; Constructor.prototype = new ReactClassComponent(); Constructor.prototype.constructor = Constructor; injectedMixins.forEach( mixSpecIntoComponent.bind(null,Constructor) ); mixSpecIntoComponent(Constructor,spec); // Initialize the defaultProps property after all mixins have been merged if (Constructor.getDefaultProps){:Constructor.defaultProps = Constructor.getDefaultProps()}("production" !== "development" ? invariant( Constructor.prototype.render,'createClass(...): Class specification must implement a `render` method.' ) : invariant(Constructor.prototype.render)); if ("production" !== "development"){("production" !== "development" ? warning(!Constructor.prototype.componentShouldUpdate,'%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.',spec.displayName || 'A component'):null)}34:[function(_dereq_,module,exports),]{'use strict':var ReactUpdateQueue = _dereq_(86);:var invariant = _dereq_(135);:var warning = _dereq_(154);:this.context = context}ReactComponent.prototype.setState = function(partialState,callback){("production" !== "development" ? invariant(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null,'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.'):invariant(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null))}ReactUpdateQueue.enqueueSetState(this,partialState); if (callback){:ReactUpdateQueue.enqueueCallback(this,callback)}; ReactComponent.prototype.forceUpdate = function(callback){:ReactUpdateQueue.enqueueForceUpdate(this)}; var defineDeprecationWarning = function(methodName,displayName){:return undefined}35:[function(_dereq_,module,exports),]{'use strict':var ReactDOMIDOperations = _dereq_(44);:var ReactMount = _dereq_(70)}36:[function(_dereq_,module,exports),]{'use strict':var invariant = _dereq_(135);:var injected = false;:ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;:ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;:ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;:injected = true}37:[function(_dereq_,module,exports),]{'use strict':var ReactComponentEnvironment = _dereq_(36);:var ReactContext = _dereq_(38);:var ReactCurrentOwner = _dereq_(39);:var ReactElement = _dereq_(57);:var ReactElementValidator = _dereq_(58);:var ReactInstanceMap = _dereq_(67);:var ReactLifeCycle = _dereq_(68);:var ReactNativeComponent = _dereq_(73);:var ReactPerf = _dereq_(75);:var ReactPropTypeLocations = _dereq_(77);:var ReactPropTypeLocationNames = _dereq_(76);:var ReactReconciler = _dereq_(81);:var ReactUpdates = _dereq_(87);:var assign = _dereq_(27);:var emptyObject = _dereq_(115);:var invariant = _dereq_(135);:var shouldUpdateReactComponent = _dereq_(151);:var warning = _dereq_(154)}var nextMountID = 1; var ReactCompositeComponentMixin ={:this._rootNodeID = null;:this._instance = null;:// See ReactUpdateQueue this._pendingElement = null;:this._pendingStateQueue = null;:this._pendingReplaceState = false;:this._pendingForceUpdate = false;:this._renderedComponent = null;:this._context = null;:this._mountOrder = 0;:this._isTopLevel = false;:// See ReactUpdates and ReactUpdateQueue. this._pendingCallbacks = null},mountComponent: function(rootID,transaction,context){:this._context = context;:this._mountOrder = nextMountID++;:this._rootNodeID = rootID;:var publicProps = this._processProps(this._currentElement.props);:var publicContext = this._processContext(this._currentElement._context);:var Component = ReactNativeComponent.getComponentClassForElement(this._currentElement);:// Initialize the public class var inst = new Component(publicProps,publicContext)}// These should be set up in the constructor,but as a convenience for // simpler class abstractions,we set them up after the fact. inst.props = publicProps; inst.context = publicContext; inst.refs = emptyObject; this._instance = inst; // Store a reference from the instance back to the internal representation ReactInstanceMap.set(inst,this); if ("production" !== "development"){:this._warnIfContextsDiffer(this._currentElement._context,context)}var initialState = inst.state; if (initialState === undefined){:inst.state = initialState = null}this._renderedComponent = this._instantiateReactComponent( renderedElement,this._currentElement.type // The wrapping type ); var markup = ReactReconciler.mountComponent( this._renderedComponent,rootID,transaction,this._processChildContext(context) ); if (inst.componentDidMount){:transaction.getReactMountReady().enqueue(inst.componentDidMount,inst)}ReactReconciler.unmountComponent(this._renderedComponent); this._renderedComponent = null; // Reset pending fields this._pendingStateQueue = null; this._pendingReplaceState = false; this._pendingForceUpdate = false; this._pendingCallbacks = null; this._pendingElement = null; // These fields do not really need to be reset since this object is no // longer accessible. this._context = null; this._rootNodeID = null; // Delete the reference from the instance to this internal representation // which allow the internals to be properly cleaned up even if the user // leaks a reference to the public instance. ReactInstanceMap.remove(inst); // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Schedule a partial update to the props. Only used for internal testing.
   *
   * @param {object} partialProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @internal
   */
  _setPropsInternal: function(partialProps, callback) {
    // This is a deoptimized path. We optimize for always having an element.
    // This creates an extra internal element.
    var element = this._pendingElement || this._currentElement;
    this._pendingElement = ReactElement.cloneAndReplaceProps(
      element,
      assign({}, element.props, partialProps)
    );
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function(context) {
    var maskedContext = null;
    // This really should be getting the component class for the element,
    // but we know that we're not going to need it for built-ins. if (typeof this._currentElement.type === 'string'),var contextTypes = this._currentElement.type.contextTypes; if (!contextTypes){:return emptyObject}; for (var contextName in contextTypes){:maskedContext[contextName]= context[contextName]},_processContext: function(context){:var maskedContext = this._maskContext(context)},_processChildContext: function(currentContext){:var inst = this._instance;:var childContext = inst.getChildContext && inst.getChildContext()}for (var name in childContext){("production" !== "development" ? invariant(name in inst.constructor.childContextTypes,'%s.getChildContext(): key "%s" is not defined in childContextTypes.',this.getName() || 'ReactCompositeComponent',name):invariant(name in inst.constructor.childContextTypes))},_checkPropTypes: function(propTypes,props,location){// TODO:Stop validating prop types here and only use the element // validation. var componentName = this.getName();:it must be a function,usually ' +
            'from React.PropTypes.',
            componentName || 'React class',
            ReactPropTypeLocationNames[location],
            propName
          ) : invariant(typeof propTypes[propName] === 'function'));
          error = propTypes[propName](props, propName, componentName, location);
        } catch (ex) {
          error = ex;
        }
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // React.render calls, so I'm abstracting it away into // a function to minimize refactoring in the future var addendum = getDeclarationErrorAddendum(this)},receiveComponent: function(nextElement,transaction,nextContext){:var prevElement = this._currentElement;:var prevContext = this._context;:this._pendingElement = null;:this.updateComponent(transaction,prevElement,nextElement,prevContext,nextContext)},_warnIfContextsDiffer: function(ownerBasedContext,parentBasedContext){:ownerBasedContext = this._maskContext(ownerBasedContext);:parentBasedContext = this._maskContext(parentBasedContext);:var parentKeys = Object.keys(parentBasedContext).sort();:var displayName = this.getName()|| 'ReactCompositeComponent';:for(var i = 0;:i < parentKeys.length;("production" !== "development" ? warning(ownerBasedContext[key]=== parentBasedContext[key],'owner-based and parent-based contexts differ ' + '(values: `%s` vs `%s`) for key (%s) while mounting %s ' + '(see: http://fb.me/react-context-by-parent)',ownerBasedContext[key],parentBasedContext[key],key,displayName):null)},updateComponent: function( transaction,prevParentElement,nextParentElement,prevUnmaskedContext,nextUnmaskedContext ){:var inst = this._instance;:var nextContext = inst.context;:var nextProps = inst.props;:nextProps = this._processProps(nextParentElement.props)}// An update here will schedule an update but immediately set // _pendingStateQueue which will ensure that any state updates gets // immediately reconciled instead of waiting for the next batch. if (inst.componentWillReceiveProps){:inst.componentWillReceiveProps(nextProps,nextContext)}var nextState = this._processPendingState(nextProps,nextContext); var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps,nextState,nextContext); if ("production" !== "development"){("production" !== "development" ? warning(typeof shouldUpdate !== 'undefined','%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.',this.getName() || 'ReactCompositeComponent'):null)}if (shouldUpdate){:this._pendingForceUpdate = false;:// Will set `this.props`,`this.state` and `this.context`. this._performComponentUpdate(nextParentElement,nextProps,nextState,nextContext,transaction,nextUnmaskedContext)}transaction * @internal */ _updateRenderedComponent:function(transaction,context){var prevComponentInstance = this._renderedComponent; var prevRenderedElement = prevComponentInstance._currentElement; var nextRenderedElement = this._renderValidatedComponent(); if (shouldUpdateReactComponent(prevRenderedElement,nextRenderedElement)){:ReactReconciler.receiveComponent(prevComponentInstance,nextRenderedElement,transaction,this._processChildContext(context))}else{:// These two IDs are actually the same! But nothing should rely on that. var thisID = this._rootNodeID;:var prevComponentID = prevComponentInstance._rootNodeID;:ReactReconciler.unmountComponent(prevComponentInstance);:this._renderedComponent = this._instantiateReactComponent(nextRenderedElement,this._currentElement.type);:var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent,thisID,transaction,context);:this._replaceNodeWithMarkupByID(prevComponentID,nextMarkup)}},_replaceNodeWithMarkupByID: function(prevComponentID,nextMarkup){:ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID,nextMarkup)},_renderValidatedComponentWithoutOwnerOrContext: function(){:var inst = this._instance;:var renderedComponent = inst.render()}42:[function(_dereq_,module,exports),]{'use strict':var CSSPropertyOperations = _dereq_(5);:var DOMProperty = _dereq_(10);:var DOMPropertyOperations = _dereq_(11);:var ReactBrowserEventEmitter = _dereq_(30);:var ReactComponentBrowserEnvironment = _dereq_(35);:var ReactMount = _dereq_(70);:var ReactMultiChild = _dereq_(71);:var ReactPerf = _dereq_(75);:var assign = _dereq_(27);:var escapeTextContentForBrowser = _dereq_(116);:var invariant = _dereq_(135);:var isEventSupported = _dereq_(136);:var keyOf = _dereq_(141);:var warning = _dereq_(154);:var deleteListener = ReactBrowserEventEmitter.deleteListener;:var listenTo = ReactBrowserEventEmitter.listenTo;:var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules}; var STYLE = keyOf({style:null}// Note the use of `==` which checks for null or undefined. if (props.dangerouslySetInnerHTML != null){("production" !== "development" ? invariant(props.children == null,'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'):invariant(props.children == null));("production" !== "development" ? invariant(props.dangerouslySetInnerHTML.__html != null,'`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit http://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.'):invariant(props.dangerouslySetInnerHTML.__html != null))}; // We accept any tag to be rendered but since this gets injected into abitrary // HTML,remove // the old content var lastHasContentOrHtml = lastContent != null || lastHtml != null; var nextHasContentOrHtml = nextContent != null || nextHtml != null; if (lastChildren != null && nextChildren == null),we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== "development" ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this._renderedChildren = null;
  this._previousStyleCopy = null;
  this._rootNodeID = null;
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  construct: function(element) {
    this._currentElement = element;
  },

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} The computed markup.
   */
  mountComponent: function(rootID, transaction, context) {
    this._rootNodeID = rootID;
    assertValidProps(this._currentElement.props);
    var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
    return (
      this._createOpenTagMarkupAndPutListeners(transaction) +
      this._createContentMarkup(transaction, context) +
      closeTag
    );
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this._currentElement.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = this._previousStyleCopy = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction, context) {
    var prefix = '';
    if (this._tag === 'listing' ||
        this._tag === 'pre' ||
        this._tag === 'textarea') {
      // Add an initial newline because browsers ignore the first newline in
      // a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.
      prefix = '\n';
    }

    var props = this._currentElement.props;

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return prefix + innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        return prefix + escapeTextContentForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction,
          context
        );
        return prefix + mountImages.join('');
      }
    }
    return prefix;
  },

  receiveComponent: function(nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function(transaction, prevElement, nextElement, context) {
    assertValidProps(this._currentElement.props);
    this._updateDOMProperties(prevElement.props, transaction);
    this._updateDOMChildren(prevElement.props, transaction, context);
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this._currentElement.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ?
        this._previousStyleCopy :
        lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = this._previousStyleCopy = assign({}, nextProp);
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction, context) {
    var nextProps = this._currentElement.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa{:this.updateChildren(null,transaction,context)}else if (lastHasContentOrHtml && !nextHasContentOrHtml){:this.updateTextContent('')}else if (nextChildren != null){:this.updateChildren(nextChildren,transaction,context)},unmountComponent: function(){:this.unmountChildren();:ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);:ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);:this._rootNodeID = null}; ReactPerf.measureMethods(ReactDOMComponent,'ReactDOMComponent',{mountComponent:'mountComponent',updateComponent:'updateComponent'}43:[function(_dereq_,module,exports),]{'use strict':var EventConstants = _dereq_(15);:var LocalEventTrapMixin = _dereq_(25);:var ReactBrowserComponentMixin = _dereq_(29);:var ReactClass = _dereq_(33);:var ReactElement = _dereq_(57);:var form = ReactElement.createFactory('form')}44:[function(_dereq_,module,exports),]{'use strict':var CSSPropertyOperations = _dereq_(5);:var DOMChildrenOperations = _dereq_(9);:var DOMPropertyOperations = _dereq_(11);:var ReactMount = _dereq_(70);:var ReactPerf = _dereq_(75);:var invariant = _dereq_(135);:var setInnerHTML = _dereq_(148)}; var ReactDOMIDOperations ={("production" !== "development" ? invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name),'updatePropertyByID(...): %s',INVALID_PROPERTY_ERRORS[name):invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)))},updateTextContentByID: function(id,content){:var node = ReactMount.getNode(id);:DOMChildrenOperations.updateTextContent(node,content)},dangerouslyReplaceNodeWithMarkupByID: function(id,markup){:var node = ReactMount.getNode(id);:DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node,markup)},dangerouslyProcessChildrenUpdates: function(updates,markup){:for(var i = 0;:i < updates.length}; ReactPerf.measureMethods(ReactDOMIDOperations,'ReactDOMIDOperations',{updatePropertyByID:'updatePropertyByID',deletePropertyByID:'deletePropertyByID',updateStylesByID:'updateStylesByID',updateInnerHTMLByID:'updateInnerHTMLByID',updateTextContentByID:'updateTextContentByID',dangerouslyReplaceNodeWithMarkupByID:'dangerouslyReplaceNodeWithMarkupByID',dangerouslyProcessChildrenUpdates:'dangerouslyProcessChildrenUpdates'}45:[function(_dereq_,module,exports),]{'use strict':var EventConstants = _dereq_(15);:var LocalEventTrapMixin = _dereq_(25);:var ReactBrowserComponentMixin = _dereq_(29);:var ReactClass = _dereq_(33);:var ReactElement = _dereq_(57);:var iframe = ReactElement.createFactory('iframe')}46:[function(_dereq_,module,exports),]{'use strict':var EventConstants = _dereq_(15);:var LocalEventTrapMixin = _dereq_(25);:var ReactBrowserComponentMixin = _dereq_(29);:var ReactClass = _dereq_(33);:var ReactElement = _dereq_(57);:var img = ReactElement.createFactory('img')},componentDidMount: function(){:this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad,'load');:this.trapBubbledEvent(EventConstants.topLevelTypes.topError,'error')}47:[function(_dereq_,module,exports),]{'use strict':var AutoFocusMixin = _dereq_(2);:var DOMPropertyOperations = _dereq_(11);:var LinkedValueUtils = _dereq_(24);:var ReactBrowserComponentMixin = _dereq_(29);:var ReactClass = _dereq_(33);:var ReactElement = _dereq_(57);:var ReactMount = _dereq_(70);:var ReactUpdates = _dereq_(87);:var assign = _dereq_(27);:var invariant = _dereq_(135);:var input = ReactElement.createFactory('input')}// Here we use asap to wait until all updates have propagated,which // is important when using controlled components within layers: // https://github.com/facebook/react/issues/1698 ReactUpdates.asap(forceUpdateIfMounted,this); var name = this.props.name; if (this.props.type === 'radio' && name != null){:var rootNode = this.getDOMNode();:var queryRoot = rootNode}// If `rootNode.form` was non-null,// but that sometimes behaves strangely in IE8. We could also try using // `form.getElementsByName`,but that will only return direct children // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type=radio]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== "development" ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== "development" ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

},{"11":11,"135":135,"2":2,"24":24,"27":27,"29":29,"33":33,"57":57,"70":70,"87":87}],48:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

'use strict';

var ReactBrowserComponentMixin = _dereq_(29);
var ReactClass = _dereq_(33);
var ReactElement = _dereq_(57);

var warning = _dereq_(154);

var option = ReactElement.createFactory('option');

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactClass.createClass({
  displayName: 'ReactDOMOption',
  tagName: 'OPTION',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select>instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

},{"154":154,"29":29,"33":33,"57":57}],49:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

'use strict';

var AutoFocusMixin = _dereq_(2);
var LinkedValueUtils = _dereq_(24);
var ReactBrowserComponentMixin = _dereq_(29);
var ReactClass = _dereq_(33);
var ReactElement = _dereq_(57);
var ReactUpdates = _dereq_(87);

var assign = _dereq_(27);

var select = ReactElement.createFactory('select');

function updateOptionsIfPendingUpdateAndMounted() {
  /*jshint validthis:true */
  if (this._pendingUpdate) {
    this._pendingUpdate = false;
    var value = LinkedValueUtils.getValue(this);
    if (value != null && this.isMounted()) {
      updateOptions(this, value);
    }
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return null;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(component, propValue) {
  var selectedValue, i, l;
  var options = component.getDOMNode().options;

  if (component.props.multiple) {
    selectedValue = {};
    for (i = 0, l = propValue.length; i < l; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0, l = options.length; i < l; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all // browsers for all cases. selectedValue = ''+propValue; for (i = 0,l = options.length; i < l; i++),then we could try `form.elements`{:return}if (options.length){:options[0].selected = true}*/ function getIEOffsets(node){:var selection = document.selection;:var selectedRange = selection.createRange();:var selectedLength = selectedRange.text.length;:// Duplicate selection so we can move range without breaking user selection. var fromStart = selectedRange.duplicate();:fromStart.moveToElementText(node);:fromStart.setEndPoint('EndToStart',selectedRange);:var startOffset = fromStart.text.length;:var endOffset = startOffset + selectedLength}function getModernOffsets(node){:var selection = window.getSelection && window.getSelection()}but IE sometimes gets // this value wrong. var isSelectionCollapsed = isCollapsed( selection.anchorNode,selection.anchorOffset,selection.focusNode,selection.focusOffset ); var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length; var tempRange = currentRange.cloneRange(); tempRange.selectNodeContents(node); tempRange.setEnd(currentRange.startContainer,currentRange.startOffset); var isTempRangeCollapsed = isCollapsed( tempRange.startContainer,tempRange.startOffset,tempRange.endContainer,tempRange.endOffset ); var start = isTempRangeCollapsed ? 0 : tempRange.toString().length; var end = start+rangeLength; // Detect whether the selection is backward. var detectionRange = document.createRange(); detectionRange.setStart(anchorNode,anchorOffset); detectionRange.setEnd(focusNode,focusOffset); var isBackward = detectionRange.collapsed; return,the selection is collapsed. // `Selection.isCollapsed` is available natively,var anchorNode = selection.anchorNode; var anchorOffset = selection.anchorOffset; var focusNode = selection.focusNode; var focusOffset = selection.focusOffset; var currentRange = selection.getRangeAt(0); // If the node and offset values are the same{start:isBackward ? end:start,end:isBackward ? start:end}function setIEOffsets(node,offsets){:var range = document.selection.createRange().duplicate();:var start,end;:end = start}else if (offsets.start>offsets.end){:start = offsets.end;:end = offsets.start},_handleChange: function(event){:var returnValue;:var onChange = LinkedValueUtils.getOnChange(this)}53:[function(_dereq_,module,exports),]{'use strict':var ReactUpdates = _dereq_(87);:var Transaction = _dereq_(103);:var assign = _dereq_(27);:var emptyFunction = _dereq_(114)}; var FLUSH_BATCHED_UPDATES ={initialize:emptyFunction,close:ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)}; var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES,RESET_BATCHED_UPDATES]; function ReactDefaultBatchingStrategyTransaction(){:this.reinitializeTransaction()}); var transaction = new ReactDefaultBatchingStrategyTransaction(); var ReactDefaultBatchingStrategy ={:ReactDefaultBatchingStrategy.isBatchingUpdates = true}54:[function(_dereq_,module,exports),]{'use strict':var BeforeInputEventPlugin = _dereq_(3);:var ChangeEventPlugin = _dereq_(7);:var ClientReactRootIndex = _dereq_(8);:var DefaultEventPluginOrder = _dereq_(13);:var EnterLeaveEventPlugin = _dereq_(14);:var ExecutionEnvironment = _dereq_(21);:var HTMLDOMPropertyConfig = _dereq_(23);:var MobileSafariClickEventPlugin = _dereq_(26);:var ReactBrowserComponentMixin = _dereq_(29);:var ReactClass = _dereq_(33);:var ReactComponentBrowserEnvironment = _dereq_(35);:var ReactDefaultBatchingStrategy = _dereq_(53);:var ReactDOMComponent = _dereq_(42);:var ReactDOMButton = _dereq_(41);:var ReactDOMForm = _dereq_(43);:var ReactDOMImg = _dereq_(46);:var ReactDOMIDOperations = _dereq_(44);:var ReactDOMIframe = _dereq_(45);:var ReactDOMInput = _dereq_(47);:var ReactDOMOption = _dereq_(48);:var ReactDOMSelect = _dereq_(49);:var ReactDOMTextarea = _dereq_(52);:var ReactDOMTextComponent = _dereq_(51);:var ReactElement = _dereq_(57);:var ReactEventListener = _dereq_(62);:var ReactInjection = _dereq_(64);:var ReactInstanceHandles = _dereq_(66);:var ReactMount = _dereq_(70);:var ReactReconcileTransaction = _dereq_(80);:var SelectEventPlugin = _dereq_(89);:var ServerReactRootIndex = _dereq_(90);:var SimpleEventPlugin = _dereq_(91);:var SVGDOMPropertyConfig = _dereq_(88);:var createFullPageComponent = _dereq_(111)}function inject(){:ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);:ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);:ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);:ReactInjection.EventPluginHub.injectMount(ReactMount)}); ReactInjection.NativeComponent.injectGenericComponentClass( ReactDOMComponent ); ReactInjection.NativeComponent.injectTextComponentClass( ReactDOMTextComponent ); ReactInjection.NativeComponent.injectAutoWrapper( autoGenerateWrapperClass ); // This needs to happen before createFullPageComponent() otherwise the mixin // won't be included.
  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'iframe': ReactDOMIframe,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
  ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);

  if ("production" !== "development") {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = _dereq_(55);
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

},{"111":111,"13":13,"14":14,"21":21,"23":23,"26":26,"29":29,"3":3,"33":33,"35":35,"41":41,"42":42,"43":43,"44":44,"45":45,"46":46,"47":47,"48":48,"49":49,"51":51,"52":52,"53":53,"55":55,"57":57,"62":62,"64":64,"66":66,"7":7,"70":70,"8":8,"80":80,"88":88,"89":89,"90":90,"91":91}],55:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

'use strict';

var DOMProperty = _dereq_(10);
var ReactDefaultPerfAnalysis = _dereq_(56);
var ReactMount = _dereq_(70);
var ReactPerf = _dereq_(75);

var performanceNow = _dereq_(146);

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner>component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner>component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (fnName === '_mountImageIntoNode' ||
          moduleName === 'ReactDOMIDOperations') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === '_mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        (// TODO: receiveComponent()?
        (fnName === 'mountComponent' ||
        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {

        if (typeof this._currentElement.type === 'string') {
          return func.apply(this, args);
        }

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.getName(),
          owner: this._currentElement._owner ?
            this._currentElement._owner.getName() :
            '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"10":10,"146":146,"56":56,"70":70,"75":75}],56:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = _dereq_(27);

// Don't try to save users less than 1.2ms (a number I made up) var DONT_CARE_THRESHOLD = 1.2; var DOM_OPERATION_TYPES ={'_mountImageIntoNode':'set innerHTML',INSERT_MARKUP:'set innerHTML',MOVE_EXISTING:'move',REMOVE_NODE:'remove',TEXT_CONTENT:'set textContent','updatePropertyByID':'update attribute','deletePropertyByID':'delete attribute','updateStylesByID':'update styles','updateInnerHTMLByID':'set innerHTML','dangerouslyReplaceNodeWithMarkupByID':'replace'}; function getTotalTime(measurements){// TODO:return number of DOM ops? could be misleading. // TODO:measure dropped frames after reconcile? // TODO:log total time of each reconcile and the top-level component // class that triggered it. var totalTime = 0;:for(var i = 0;:i < measurements.length;:totalTime += measurement.totalTime}function getDOMSummary(measurements){:var items =[];:for(var i = 0;:i < measurements.length;:var id}; var displayName; for (var i = 0; i < measurements.length; i++){:var measurement = measurements[i]},measurement.exclusive,measurement.inclusive ); for (var id in allIDs){:displayName = measurement.displayNames[id].current}; if (measurement.render[id]){:candidates[displayName].render += measurement.render[id]}if (measurement.exclusive[id]){:candidates[displayName].exclusive += measurement.exclusive[id]}if (measurement.inclusive[id]){:candidates[displayName].inclusive += measurement.inclusive[id]}; var inclusiveKey; for (var i = 0; i < measurements.length; i++){:var measurement = measurements[i]},measurement.exclusive,measurement.inclusive ); var cleanComponents; if (onlyClean){:cleanComponents = getUnchangedComponents(measurement)}var displayName = measurement.displayNames[id]; // Inclusive time is not useful for many components without knowing where // they are instantiated. So we aggregate inclusive time with both the // owner and current displayName as the key. inclusiveKey = displayName.owner+' > '+displayName.current; candidates[inclusiveKey] = candidates[inclusiveKey] ||{componentName:inclusiveKey,time:0,count:0}; if (measurement.inclusive[id]){:candidates[inclusiveKey].time += measurement.inclusive[id]}if (measurement.counts[id]){:candidates[inclusiveKey].count += measurement.counts[id]}arr.sort(function(a,b){:return b.time - a.time},measurement.exclusive,measurement.inclusive); for (var id in allIDs){:var isDirty = false;:// For each component that rendered,see if a component that triggered // a DOM op is in its subtree. for(var i = 0;:i < dirtyLeafIDs.length;:break}if (!isDirty && measurement.counts[id]>0){:cleanComponents[id]= true}var ReactDefaultPerfAnalysis ={getExclusiveSummary:getExclusiveSummary,getInclusiveSummary:getInclusiveSummary,getDOMSummary:getDOMSummary,getTotalTime:getTotalTime}57:[function(_dereq_,module,exports),]{'use strict':var ReactContext = _dereq_(38);:var ReactCurrentOwner = _dereq_(39);:var assign = _dereq_(27);:var warning = _dereq_(154)},set: function(value){("production" !== "development" ? warning(false,'Don\'t set the %s property of the React element. Instead, ' + 'specify the correct value when initially creating the element.',key):null);:this._store[key]= value}; for (var key in pseudoFrozenProperties){:defineWarningProperty(prototype,key)}catch (x){:// IE will fail on defineProperty}var ReactElement = function(type,key,ref,owner,context,props){:// Built-in properties that belong on the element this.type = type;:this.key = key;:this.ref = ref;:// Record the component responsible for creating this element. this._owner = owner;// TODO:Deprecate withContext,and then the context becomes accessible // through the owner. this._context = context}; if ("production" !== "development"){:defineMutationMembrane(ReactElement.prototype)}ReactElement.createElement = function(type,config,children){:var propName}; var key = null; var ref = null; if (config != null){ref = config.ref === undefined ? null:config.ref;key = config.key === undefined ? null:'' + config.key}// Resolve default props if (type && type.defaultProps){:var defaultProps = type.defaultProps}; ReactElement.createFactory = function(type){:var factory = ReactElement.createElement.bind(null,type);// Expose the type on the factory and the prototype so that it can be // easily accessed on elements. E.g. <Foo />.type === Foo.type. // This should not be named `constructor` since this may not be the function // that created the element,and it may not even be a constructor. // Legacy hook TODO:Warn if this is accessed factory.type = type;:return factory}; ReactElement.cloneAndReplaceProps = function(oldElement,newProps){:var newElement = new ReactElement(oldElement.type,oldElement.key,oldElement.ref,oldElement._owner,oldElement._context,newProps)}; ReactElement.cloneElement = function(element,config,children){:var propName},element.props); // Reserved names are extracted var key = element.key; var ref = element.ref; // Owner will be preserved,unless ref is overridden var owner = element._owner; if (config != null){:owner = ReactCurrentOwner.current}if (config.key !== undefined){:key = '' + config.key}// Children can be more than one argument,and those are transferred onto // the newly allocated props object. var childrenLength = arguments.length - 2; if (childrenLength === 1){:props.children = children}else if (childrenLength>1){:var childArray = Array(childrenLength);:for(var i = 0;:i < childrenLength}; ReactElement.isValidElement = function(object){:// ReactTestUtils is often used outside of beforeEach where as React is // within it. This leads to two different instances of React on the same // page. To identify a element from a different React instance we use // a flag instead of an instanceof check. var isElement = !!(object && object._isReactElement)}; var NUMERIC_PROPERTY_REGEX = /^\d+$/; function getName(instance){:var publicInstance = instance && instance.getPublicInstance()}var constructor = publicInstance.constructor; if (!constructor){:return undefined}function getCurrentOwnerDisplayName(){:var current = ReactCurrentOwner.current;:return(current && getName(current)|| undefined)}function warnAndMonitorForKeyUse(message,element,parentType){:var ownerName = getCurrentOwnerDisplayName();var parentName = typeof parentType === 'string' ? parentType:parentType.displayName || parentType.name;:var useName = ownerName || parentName}) ); if (memoizer.hasOwnProperty(useName)){:return}but if it accepts children as a // property,it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerAddendum = '';
  if (element &&
      element._owner &&
      element._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    var childOwnerName = getName(element._owner);

    childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");
  }

  ("production" !== "development" ? warning(
    false,
    message + '%s%s See http://fb.me/react-warning-keys for more information.',
    parentOrOwnerAddendum,
    childOwnerAddendum
  ) : null);
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    node._store.validated = true;
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    } else if (typeof node === 'object') {
      var fragment = ReactFragment.extractIfFragment(node);
      for (var key in fragment) {
        if (fragment.hasOwnProperty(key)) {
          validatePropertyKey(key, fragment[key], parentType);
        }
      }
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw. try,memoizer[useName] = true; var parentOrOwnerAddendum = ownerName ? (" Check the render method of "+ownerName+".") : parentName ? (" Check the React.render call using <"+parentName+">.") : ''; // Usually the current owner is the offender{// This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        ("production" !== "development" ? invariant(
          typeof propTypes[propName] === 'function',
          '%s:%s type `%s` is invalid}element */ function checkAndWarnForMutatedProps(element){:skip mutation checking return}var originalProps = element._store.originalProps; var props = element.props; for (var propName in props){:// Copy over the new value so that the two props objects match again originalProps[propName]= props[propName]}function validatePropTypes(element){:var name = componentClass.displayName || componentClass.name}if (typeof componentClass.getDefaultProps === 'function'){("production" !== "development" ? warning(componentClass.getDefaultProps.isReactClassApproved,'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.'):null)}; ReactEmptyComponentType.prototype.componentWillUnmount = function(){:var internalInstance = ReactInstanceMap.get(this)}; ReactEmptyComponentType.prototype.render = function(){("production" !== "development" ? invariant(component,'Trying to return null from a render, but no null placeholder component ' + 'was injected.'):invariant(component));:return component()}; var emptyElement = ReactElement.createElement(ReactEmptyComponentType); function registerNullComponentID(id){:nullComponentIDsRegistry[id]= true}function deregisterNullComponentID(id){:delete nullComponentIDsRegistry[id]}function isNullComponentID(id){:return !!nullComponentIDsRegistry[id]}var ReactEmptyComponent ={emptyElement:emptyElement,injection:ReactEmptyComponentInjection,isNullComponentID:isNullComponentID}60:[function(_dereq_,module,exports),]{"use strict"}61:[function(_dereq_,module,exports),]{'use strict':var EventPluginHub = _dereq_(17);:EventPluginHub.processEventQueue()}var ReactEventEmitterMixin ={:runEventQueueInBatch(events)}62:[function(_dereq_,module,exports),]{'use strict':var EventListener = _dereq_(16);:var ExecutionEnvironment = _dereq_(21);:var PooledClass = _dereq_(28);:var ReactInstanceHandles = _dereq_(66);:var ReactMount = _dereq_(70);:var ReactUpdates = _dereq_(87);:var assign = _dereq_(27);:var getEventTarget = _dereq_(125);:var getUnboundedScrollPosition = _dereq_(131);:var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);:var container = ReactMount.findReactContainerForID(rootID);:var parent = ReactMount.getFirstReactDOM(container);:return parent}// Used to store ancestor hierarchy in top level callback function TopLevelCallbackBookKeeping(topLevelType,nativeEvent){:this.topLevelType = topLevelType;:this.nativeEvent = nativeEvent;:this.ancestors =[]}assign(TopLevelCallbackBookKeeping.prototype,{:this.nativeEvent = null;:this.ancestors.length = 0}); PooledClass.addPoolingTo( TopLevelCallbackBookKeeping,PooledClass.twoArgumentPooler ); function handleTopLevelImpl(bookKeeping){:var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent))|| window}64:[function(_dereq_,module,exports),]{'use strict':var DOMProperty = _dereq_(10);:var EventPluginHub = _dereq_(17);:var ReactComponentEnvironment = _dereq_(36);:var ReactClass = _dereq_(33);:var ReactEmptyComponent = _dereq_(59);:var ReactBrowserEventEmitter = _dereq_(30);:var ReactNativeComponent = _dereq_(73);:var ReactDOMComponent = _dereq_(42);:var ReactPerf = _dereq_(75);:var ReactRootIndex = _dereq_(83);:var ReactUpdates = _dereq_(87)}65:[function(_dereq_,module,exports),]{'use strict':var ReactDOMSelection = _dereq_(50);:var containsNode = _dereq_(109);:var focusNode = _dereq_(119);:var getActiveElement = _dereq_(121)},getSelectionInformation: function(){:var focusedElem = getActiveElement()},restoreSelection: function(priorSelectionInformation){:var curFocusedElem = getActiveElement();:var priorFocusedElem = priorSelectionInformation.focusedElem;:var priorSelectionRange = priorSelectionInformation.selectionRange},getSelection: function(input){:var selection}return selection ||{start:0,end:0},setSelection: function(input,offsets){:var start = offsets.start;:var end = offsets.end}if ('selectionStart' in input){:input.selectionStart = start;:input.selectionEnd = Math.min(end,input.value.length)}else if (document.selection && input.nodeName === 'INPUT'){:var range = input.createTextRange();:range.collapse(true);:range.moveStart('character',start);:range.moveEnd('character',end - start);:range.select()}66:[function(_dereq_,module,exports),]{'use strict':var ReactRootIndex = _dereq_(83);:var invariant = _dereq_(135);:var SEPARATOR = '.';:var SEPARATOR_LENGTH = SEPARATOR.length;:var MAX_TREE_DEPTH = 100}function isBoundary(id,index){:return id.charAt(index)=== SEPARATOR || index === id.length}function isValidID(id){:return id === '' ||(id.charAt(0)=== SEPARATOR && id.charAt(id.length - 1)!== SEPARATOR)}function isAncestorIDOf(ancestorID,descendantID){:return(descendantID.indexOf(ancestorID)=== 0 && isBoundary(descendantID,ancestorID.length))}function getParentID(id){return id ? id.substr(0,id.lastIndexOf(SEPARATOR)):''}function getNextDescendantID(ancestorID,destinationID){("production" !== "development" ? invariant(isValidID(ancestorID) && isValidID(destinationID),'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',ancestorID,destinationID):invariant(isValidID(ancestorID)&& isValidID(destinationID)));("production" !== "development" ? invariant(isAncestorIDOf(ancestorID,destinationID),'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',ancestorID,destinationID):invariant(isAncestorIDOf(ancestorID,destinationID)))}function getFirstCommonAncestorID(oneID,twoID){:var minLength = Math.min(oneID.length,twoID.length)}else if (oneID.charAt(i) !== twoID.charAt(i)){:break}function traverseParentPath(start,stop,cb,arg,skipFirst,skipLast){:start = start || '';:stop = stop || '';("production" !== "development" ? invariant(start !== stop,'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',start):invariant(start !== stop));:var traverseUp = isAncestorIDOf(stop,start);("production" !== "development" ? invariant(traverseUp || isAncestorIDOf(start,stop),'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.',start,stop):invariant(traverseUp || isAncestorIDOf(start,stop)));:// Traverse from `start` to `stop` one depth at a time. var depth = 0;var traverse = traverseUp ? getParentID:getNextDescendantID;:for(var id = start}if (ret === false || id === stop){:// Only break //after// visiting `stop`. break},createReactID: function(rootID,name){:return rootID + name},getReactRootIDFromNodeID: function(id){return index > -1 ? id.substr(0,index):id},traverseEnterLeave: function(leaveID,enterID,cb,upArg,downArg){:var ancestorID = getFirstCommonAncestorID(leaveID,enterID)}if (ancestorID !== enterID){:traverseParentPath(ancestorID,enterID,cb,downArg,true,false)},traverseTwoPhase: function(targetID,cb,arg){:traverseParentPath(targetID,'',cb,arg,false,true)},traverseAncestors: function(targetID,cb,arg){:traverseParentPath('',targetID,cb,arg,true,false)}67:[function(_dereq_,module,exports),]{'use strict'// TODO:Replace this with ES6:var ReactInstanceMap = new Map()},get: function(key){:return key._reactInternalInstance},has: function(key){:return key._reactInternalInstance !== undefined},set: function(key,value){:key._reactInternalInstance = value}68:[function(_dereq_,module,exports),]{'use strict'}69:[function(_dereq_,module,exports),]{'use strict':var adler32 = _dereq_(106);:return markup.replace('>',' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">')},canReuseMarkup: function(markup,element){:var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);:existingChecksum = existingChecksum && parseInt(existingChecksum,10);:var markupChecksum = adler32(markup);:return markupChecksum === existingChecksum}70:[function(_dereq_,module,exports),]{'use strict':var DOMProperty = _dereq_(10);:var ReactBrowserEventEmitter = _dereq_(30);:var ReactCurrentOwner = _dereq_(39);:var ReactElement = _dereq_(57);:var ReactElementValidator = _dereq_(58);:var ReactEmptyComponent = _dereq_(59);:var ReactInstanceHandles = _dereq_(66);:var ReactInstanceMap = _dereq_(67);:var ReactMarkupChecksum = _dereq_(69);:var ReactPerf = _dereq_(75);:var ReactReconciler = _dereq_(81);:var ReactUpdateQueue = _dereq_(86);:var ReactUpdates = _dereq_(87);:var emptyObject = _dereq_(115);:var containsNode = _dereq_(109);:var getReactRootElementInContainer = _dereq_(129);:var instantiateReactComponent = _dereq_(134);:var invariant = _dereq_(135);:var setInnerHTML = _dereq_(148);:var shouldUpdateReactComponent = _dereq_(151);:var warning = _dereq_(154);:var SEPARATOR = ReactInstanceHandles.SEPARATOR;:var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME}// Used to store breadth-first search state in findComponentRoot. var findComponentRootReusableArray = []; function firstDifferenceIndex(string1,string2){:var minLen = Math.min(string1length,string2length);:for(var i = 0;:i < minLen}function getReactRootID(container){:var rootElement = getReactRootElementInContainer(container);:return rootElement && ReactMount.getID(rootElement)}function getID(node){:var id = internalGetID(node);:nodeCache[id]= node}function internalGetID(node){:// If node is something like a window,document,or text node,none of // which support attributes or a .getAttribute method,gracefully return // the empty string,as if the attribute were missing. return node && node.getAttribute && node.getAttribute(ATTR_NAME)|| ''}function setID(node,id){:var oldID = internalGetID(node)}function getNodeFromInstance(instance){:var id = ReactInstanceMap.get(instance)._rootNodeID}if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id],id)){:nodeCache[id]= ReactMount.findReactNodeByID(id)}function isValid(node,id){:var container = ReactMount.findReactContainerForID(id)}function purgeID(id){:delete nodeCache[id]}var deepestNodeSoFar = null; function findDeepestCachedAncestorImpl(ancestorID){:var ancestor = nodeCache[ancestorID]}ReactMount.scrollMonitor(container,function(){:ReactUpdateQueue.enqueueElementInternal(prevComponent,nextElement)}); if ("production" !== "development"){:// Record the root element in case it later gets transplanted. rootElementsByReactRootID[getReactRootID(container)]= getReactRootElementInContainer(container)},_registerComponent: function(nextComponent,container){("production" !== "development" ? invariant(container &&((container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)),'_registerComponent(...): Target container is not a DOM element.'):invariant(container &&((container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE))));:ReactBrowserEventEmitter.ensureScrollValueMonitoring();:var reactRootID = ReactMount.registerContainer(container);:instancesByReactRootID[reactRootID]= nextComponent;:return reactRootID},_renderNewRootComponent: function( nextElement,container,shouldReuseMarkup ){:// Various parts of our code(such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;// verify that that's the case.
    ("production" !== "development" ? warning(
      ReactCurrentOwner.current == null,
      '_renderNewRootComponent():Render methods should be a pure function ' +
      'of props and state;triggering nested component updates from ' +
      'render is not allowed. If necessary,trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var componentInstance = instantiateReactComponent(nextElement, null);
    var reactRootID = ReactMount._registerComponent(
      componentInstance,
      container
    );

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(
      batchedMountComponentIntoNode,
      componentInstance,
      reactRootID,
      container,
      shouldReuseMarkup
    );

    if ("production" !== "development") {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[reactRootID] =
        getReactRootElementInContainer(container);
    }

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== "development" ? invariant(
      ReactElement.isValidElement(nextElement),
      'React.render():Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string,make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        typeof nextElement === 'function' ?
          ' Instead of passing a component class,make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like an element
        nextElement != null && nextElement.props !== undefined ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        ).getPublicInstance();
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    if ("production" !== "development") {
      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (ReactMount.isRenderedByReact(rootElementSibling)) {
            ("production" !== "development" ? warning(
              false,
              'render():Target node has markup rendered by React,but there ' +
              'are unrelated nodes as well. This is most commonly caused by ' +
              'white-space inserted around server-rendered markup.'
            ) : null);
            break;
          }

          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    ).getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = ReactElement.createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== "development" ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's // _renderValidatedComponent)assume that calls to render aren't nested;
    // verify that that's the case.(Strictly speaking,unmounting won't cause a
    // render but we still don't expect to be in a render call here.)("production" !== "development" ? warning(ReactCurrentOwner.current == null,'unmountComponentAtNode(): Render methods should be a pure function of ' + 'props and state; triggering nested component updates from render is ' + 'not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate.'):null);("production" !== "development" ? invariant(container &&((container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)),'unmountComponentAtNode(...): Target container is not a DOM element.'):invariant(container &&((container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE))));:var reactRootID = getReactRootID(container);:var component = instancesByReactRootID[reactRootID]}ReactMount.unmountComponentFromNode(component,container); delete instancesByReactRootID[reactRootID]; delete containersByReactRootID[reactRootID]; if ("production" !== "development"){:delete rootElementsByReactRootID[reactRootID]},unmountComponentFromNode: function(instance,container){:ReactReconciler.unmountComponent(instance)}// http://jsperf.com/emptying-a-node while (container.lastChild){:container.removeChild(container.lastChild)},findReactContainerForID: function(id){:var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);:var container = containersByReactRootID[reactRootID];:var containerChild = container.firstChild},findReactNodeByID: function(id){:var reactRoot = ReactMount.findReactContainerForID(id);:return ReactMount.findComponentRoot(reactRoot,id)},getFirstReactDOM: function(node){:var current = node},findComponentRoot: function(ancestorNode,targetID){:var firstChildren = findComponentRootReusableArray;:var childIndex = 0;:var deepestAncestor = findDeepestCachedAncestor(targetID)|| ancestorNode;:firstChildren[0]= deepestAncestor.firstChild;:firstChildren.length = 1;:var targetChild}if (targetChild){:// Emptying firstChildren/findComponentRootReusableArray is // not necessary for correctness,but it helps the GC reclaim // any nodes that were left at the end of the search. firstChildren.length = 0;:return targetChild},_mountImageIntoNode: function(markup,container,shouldReuseMarkup){("production" !== "development" ? invariant(container &&((container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)),'mountComponentIntoNode(...): Target container is not valid.'):invariant(container &&((container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE))))}71:[function(_dereq_,module,exports),]{'use strict':var ReactComponentEnvironment = _dereq_(36);:var ReactMultiChildUpdateTypes = _dereq_(72);:var ReactReconciler = _dereq_(81);:var ReactChildReconciler = _dereq_(31);:var updateDepth = 0;:var updateQueue =[];:var markupQueue =[]}function processQueue(){:clearQueue()}function clearQueue(){:updateQueue.length = 0;:markupQueue.length = 0}var ReactMultiChild ={:this._renderedChildren = children;:var mountImages =[];:var index = 0;:// Inlined for performance,see `ReactInstanceHandles.createReactID`. var rootID = this._rootNodeID + name;:var mountImage = ReactReconciler.mountComponent(child,rootID,transaction,context);:child._mountIndex = index;:mountImages.push(mountImage);:index++},updateTextContent: function(nextContent){:updateDepth++;:var errorThrown = true;:// Remove any rendered children. ReactChildReconciler.unmountChildren(prevChildren)},updateChildren: function(nextNestedChildren,transaction,context){:updateDepth++;:var errorThrown = true;:errorThrown = false},_updateChildren: function(nextNestedChildren,transaction,context){:var prevChildren = this._renderedChildren;:var nextChildren = ReactChildReconciler.updateChildren(prevChildren,nextNestedChildren,transaction,context);:this._renderedChildren = nextChildren}var prevChild = prevChildren && prevChildren[name]; var nextChild = nextChildren[name]; if (prevChild === nextChild){:this.moveChild(prevChild,nextIndex,lastIndex);:lastIndex = Math.max(prevChild._mountIndex,lastIndex);:prevChild._mountIndex = nextIndex}73:[function(_dereq_,module,exports),]{'use strict':var assign = _dereq_(27);:var invariant = _dereq_(135);:var autoGenerateWrapperClass = null;:var genericComponentClass = null},// This accepts a text component class that takes the text string to be // rendered as props. injectTextComponentClass: function(componentClass){:textComponentClass = componentClass},// This accepts a keyed object with classes as values. Each key represents a // tag. That particular tag will use this class instead of the generic one. injectComponentClasses: function(componentClasses){:assign(tagToComponentClass,componentClasses)},// Temporary hack since we expect DOM refs to behave like composites,// for this release. injectAutoWrapper: function(wrapperFactory){:autoGenerateWrapperClass = wrapperFactory}var tag = element.type; var componentClass = tagToComponentClass[tag]; if (componentClass == null){:tagToComponentClass[tag]= componentClass = autoGenerateWrapperClass(tag)}function createInternalComponent(element){("production" !== "development" ? invariant(genericComponentClass,'There is no registered component for the tag %s',element.type):invariant(genericComponentClass));:return new genericComponentClass(element.type,element.props)}function createInstanceForText(text){:return new textComponentClass(text)}function isTextComponent(component){:return component instanceof textComponentClass}var ReactNativeComponent ={getComponentClassForElement:getComponentClassForElement,createInternalComponent:createInternalComponent,createInstanceForText:createInstanceForText,isTextComponent:isTextComponent,injection:ReactNativeComponentInjection}74:[function(_dereq_,module,exports),]{'use strict':var invariant = _dereq_(135)},addComponentAsRefTo: function(component,ref,owner){("production" !== "development" ? invariant(ReactOwner.isValidOwner(owner),'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' + 'usually means that you\'re trying to add a ref to a component that ' + 'doesn\'t have an owner (that is, was not created inside of another ' + 'component\'s `render` method). Try rendering this component inside of ' + 'a new top-level component which will hold the ref.'):invariant(ReactOwner.isValidOwner(owner)));:owner.attachRef(ref,component)},removeComponentAsRefFrom: function(component,ref,owner){("production" !== "development" ? invariant(ReactOwner.isValidOwner(owner),'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' + 'usually means that you\'re trying to remove a ref to a component that ' + 'doesn\'t have an owner (that is, was not created inside of another ' + 'component\'s `render` method). Try rendering this component inside of ' + 'a new top-level component which will hold the ref.'):invariant(ReactOwner.isValidOwner(owner)))}75:[function(_dereq_,module,exports),76:[function(_dereq_,module,exports),]{'use strict'}; function _noMeasure(objName,fnName,func){:return func}77:[function(_dereq_,module,exports),]{'use strict':var keyMirror = _dereq_(140)}78:[function(_dereq_,module,exports),]{'use strict':var ReactElement = _dereq_(57);:var ReactFragment = _dereq_(63);:var ReactPropTypeLocationNames = _dereq_(76);:var emptyFunction = _dereq_(114);:var ANONYMOUS = '<<anonymous>>';:var elementTypeChecker = createElementTypeChecker();:var nodeTypeChecker = createNodeChecker()}function createPrimitiveTypeChecker(expectedType){:var propType = getPropType(propValue);:// `propValue` being instance of,say,date/regexp,pass the 'object' // check,but we can offer a more precise error message here rather than // 'of type `object`'. var preciseType = getPreciseType(propValue);:return new Error(("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") + ("supplied to `" + componentName + "`, expected `" + expectedType + "`."))}function createAnyTypeChecker(){:return createChainableTypeChecker(emptyFunction.thatReturns(null))}function createArrayOfTypeChecker(typeChecker){:var propType = getPropType(propValue);:return new Error(("Invalid " + locationName + " `" + propName + "` of type ") + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."))}for (var i = 0; i < propValue.length; i++){:var error = typeChecker(propValue,i,componentName,location)}function createElementTypeChecker(){:return new Error(("Invalid " + locationName + " `" + propName + "` supplied to ") + ("`" + componentName + "`, expected a ReactElement."))}function createInstanceTypeChecker(expectedClass){:var expectedClassName = expectedClass.name || ANONYMOUS;:return new Error(("Invalid " + locationName + " `" + propName + "` supplied to ") + ("`" + componentName + "`, expected instance of `" + expectedClassName + "`."))}function createEnumTypeChecker(expectedValues){:for(var i = 0;:i < expectedValues.length}function createObjectOfTypeChecker(typeChecker){:var propType = getPropType(propValue);:return new Error(("Invalid " + locationName + " `" + propName + "` of type ") + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."))}function createUnionTypeChecker(arrayOfTypeCheckers){:i < arrayOfTypeCheckers.length}function createNodeChecker(){:return new Error(("Invalid " + locationName + " `" + propName + "` supplied to ") + ("`" + componentName + "`, expected a ReactNode."))}function createShapeTypeChecker(shapeTypes){:var propType = getPropType(propValue);:return new Error(("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") + ("supplied to `" + componentName + "`, expected `object`."))}for (var key in shapeTypes){:var checker = shapeTypes[key]}var error = checker(propValue,key,componentName,location); if (error){:return error}function isNode(propValue){case 'boolean':return !propValue}if (propValue === null || ReactElement.isValidElement(propValue)){:return true}// Equivalent of `typeof` but with special handling for array and regexp. function getPropType(propValue){:var propType = typeof propValue}if (propValue instanceof RegExp){:// Old webkits(at least until Android 4)return 'function' rather than // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"114":114,"57":57,"63":63,"76":76}],79:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

'use strict';

var PooledClass = _dereq_(28);
var ReactBrowserEventEmitter = _dereq_(30);

var assign = _dereq_(27);

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"27":27,"28":28,"30":30}],80:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

'use strict';

var CallbackQueue = _dereq_(6);
var PooledClass = _dereq_(28);
var ReactBrowserEventEmitter = _dereq_(30);
var ReactInputSelection = _dereq_(65);
var ReactPutListenerQueue = _dereq_(79);
var Transaction = _dereq_(103);

var assign = _dereq_(27);

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's // accessible and defaults to false when `ReactDOMComponent` and // `ReactTextComponent` checks it in `mountComponent`.` this.renderToStaticMarkup = false;:this.reactMountReady = CallbackQueue.getPooled(null);:this.putListenerQueue = ReactPutListenerQueue.getPooled()},getReactMountReady: function(){:return this.reactMountReady},getPutListenerQueue: function(){:return this.putListenerQueue}81:[function(_dereq_,module,exports),]{'use strict':var ReactRef = _dereq_(82);:var ReactElementValidator = _dereq_(58)},unmountComponent: function(internalInstance){:ReactRef.detachRefs(internalInstance,internalInstance._currentElement);:internalInstance.unmountComponent()},receiveComponent: function( internalInstance,nextElement,transaction,context ){:var prevElement = internalInstance._currentElement}var refsChanged = ReactRef.shouldUpdateRefs( prevElement,nextElement ); if (refsChanged){:ReactRef.detachRefs(internalInstance,prevElement)}internalInstance.receiveComponent(nextElement,transaction,context); if (refsChanged){:transaction.getReactMountReady().enqueue(attachRefs,internalInstance)},performUpdateIfNecessary: function( internalInstance,transaction ){:internalInstance.performUpdateIfNecessary(transaction)}82:[function(_dereq_,module,exports),]{'use strict':var ReactOwner = _dereq_(74)}ReactRef.attachRefs = function(instance,element){:var ref = element.ref}if (internalInstance._pendingCallbacks){:internalInstance._pendingCallbacks.push(callback)},enqueueCallbackInternal: function(internalInstance,callback){("production" !== "development" ? invariant(typeof callback === 'function','enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.'):invariant(typeof callback === 'function'))},enqueueForceUpdate: function(publicInstance){:var internalInstance = getInternalInstanceReadyForUpdate(publicInstance,'forceUpdate')},enqueueReplaceState: function(publicInstance,completeState){:var internalInstance = getInternalInstanceReadyForUpdate(publicInstance,'replaceState')},enqueueSetState: function(publicInstance,partialState){:var internalInstance = getInternalInstanceReadyForUpdate(publicInstance,'setState')},enqueueSetProps: function(publicInstance,partialProps){:var internalInstance = getInternalInstanceReadyForUpdate(publicInstance,'setProps')},enqueueReplaceProps: function(publicInstance,props){:var internalInstance = getInternalInstanceReadyForUpdate(publicInstance,'replaceProps')},enqueueElementInternal: function(internalInstance,newElement){:internalInstance._pendingElement = newElement;:enqueueUpdate(internalInstance)}87:[function(_dereq_,module,exports),]{'use strict':var CallbackQueue = _dereq_(6);:var PooledClass = _dereq_(28);:var ReactCurrentOwner = _dereq_(39);:var ReactPerf = _dereq_(75);:var ReactReconciler = _dereq_(81);:var Transaction = _dereq_(103);:var assign = _dereq_(27);:var invariant = _dereq_(135);:var warning = _dereq_(154);:var dirtyComponents =[];:var asapCallbackQueue = CallbackQueue.getPooled();:var asapEnqueued = false;:var batchingStrategy = null},close: function(){:this.callbackQueue.notifyAll()}; var TRANSACTION_WRAPPERS = [NESTED_UPDATES,UPDATE_QUEUEING]; function ReactUpdatesFlushTransaction(){:this.reinitializeTransaction();:this.dirtyComponentsLength = null;:this.callbackQueue = CallbackQueue.getPooled();:this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled()},destructor: function(){:this.dirtyComponentsLength = null;:CallbackQueue.release(this.callbackQueue);:this.callbackQueue = null;:ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);:this.reconcileTransaction = null}c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== "development" ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens,so // stash the callbacks first var callbacks = component._pendingCallbacks; component._pendingCallbacks = null; ReactReconciler.performUpdateIfNecessary( component,transaction.reconcileTransaction ); if (callbacks){:for(var j = 0;:j < callbacks.length}var flushBatchedUpdates = function(){:// ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};
flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  flushBatchedUpdates
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's // _renderValidatedComponent)assume that calls to render aren't nested;
  // verify that that's the case.(This is called by each top-level update // function,like setProps,setState,forceUpdate,etc.;creation and // destruction of top-level components is guarded in ReactMount.)("production" !== "development" ? warning(ReactCurrentOwner.current == null,'enqueueUpdate(): Render methods should be a pure function of props ' + 'and state; triggering nested component updates from render is not ' + 'allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate.'):null);:return}function asap(callback,context){("production" !== "development" ? invariant(batchingStrategy.isBatchingUpdates,'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.'):invariant(batchingStrategy.isBatchingUpdates));:asapCallbackQueue.enqueue(callback,context);:asapEnqueued = true}var ReactUpdatesInjection ={:ReactUpdates.ReactReconcileTransaction = ReconcileTransaction},injectBatchingStrategy: function(_batchingStrategy){("production" !== "development" ? invariant(_batchingStrategy,'ReactUpdates: must provide a batching strategy'):invariant(_batchingStrategy));("production" !== "development" ? invariant(typeof _batchingStrategy.batchedUpdates === 'function','ReactUpdates: must provide a batchedUpdates() function'):invariant(typeof _batchingStrategy.batchedUpdates === 'function'));("production" !== "development" ? invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean','ReactUpdates: must provide an isBatchingUpdates boolean attribute'):invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));:batchingStrategy = _batchingStrategy}; var ReactUpdates ={ReactReconcileTransaction:null,batchedUpdates:batchedUpdates,enqueueUpdate:enqueueUpdate,flushBatchedUpdates:flushBatchedUpdates,injection:ReactUpdatesInjection,asap:asap}88:[function(_dereq_,module,exports),]{'use strict':var DOMProperty = _dereq_(10);:var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE},DOMAttributeNames:{fillOpacity:'fill-opacity',fontFamily:'font-family',fontSize:'font-size',gradientTransform:'gradientTransform',gradientUnits:'gradientUnits',markerEnd:'marker-end',markerMid:'marker-mid',markerStart:'marker-start',patternContentUnits:'patternContentUnits',patternUnits:'patternUnits',preserveAspectRatio:'preserveAspectRatio',spreadMethod:'spreadMethod',stopColor:'stop-color',stopOpacity:'stop-opacity',strokeDasharray:'stroke-dasharray',strokeLinecap:'stroke-linecap',strokeOpacity:'stroke-opacity',strokeWidth:'stroke-width',textAnchor:'text-anchor',viewBox:'viewBox'}89:[function(_dereq_,module,exports),]{'use strict':var EventConstants = _dereq_(15);:var EventPropagators = _dereq_(20);:var ReactInputSelection = _dereq_(65);:var SyntheticEvent = _dereq_(95);:var getActiveElement = _dereq_(121);:var isTextInputElement = _dereq_(138);:var keyOf = _dereq_(141);:var shallowEqual = _dereq_(150);:var topLevelTypes = EventConstants.topLevelTypes}else if (window.getSelection){:var selection = window.getSelection()}else if (document.selection){:var range = document.selection.createRange()}// Only fire when selection has actually changed. var currentSelection = getSelection(activeElement); if (!lastSelection || !shallowEqual(lastSelection,currentSelection)){:lastSelection = currentSelection;:var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select,activeElementID,nativeEvent);:syntheticEvent.type = 'select';:syntheticEvent.target = activeElement;:EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);:return syntheticEvent}var SelectEventPlugin ={:activeElementID = topLevelTargetID;:lastSelection = null}91:[function(_dereq_,module,exports),]{'use strict':var EventConstants = _dereq_(15);:var EventPluginUtils = _dereq_(19);:var EventPropagators = _dereq_(20);:var SyntheticClipboardEvent = _dereq_(92);:var SyntheticEvent = _dereq_(95);:var SyntheticFocusEvent = _dereq_(96);:var SyntheticKeyboardEvent = _dereq_(98);:var SyntheticMouseEvent = _dereq_(99);:var SyntheticDragEvent = _dereq_(94);:var SyntheticTouchEvent = _dereq_(100);:var SyntheticUIEvent = _dereq_(101);:var SyntheticWheelEvent = _dereq_(102);:var getEventCharCode = _dereq_(122);:var invariant = _dereq_(135);:var keyOf = _dereq_(141);:var warning = _dereq_(154);:var topLevelTypes = EventConstants.topLevelTypes}; var topLevelEventsToDispatchConfig ={topBlur:eventTypes.blur,topClick:eventTypes.click,topContextMenu:eventTypes.contextMenu,topCopy:eventTypes.copy,topCut:eventTypes.cut,topDoubleClick:eventTypes.doubleClick,topDrag:eventTypes.drag,topDragEnd:eventTypes.dragEnd,topDragEnter:eventTypes.dragEnter,topDragExit:eventTypes.dragExit,topDragLeave:eventTypes.dragLeave,topDragOver:eventTypes.dragOver,topDragStart:eventTypes.dragStart,topDrop:eventTypes.drop,topError:eventTypes.error,topFocus:eventTypes.focus,topInput:eventTypes.input,topKeyDown:eventTypes.keyDown,topKeyPress:eventTypes.keyPress,topKeyUp:eventTypes.keyUp,topLoad:eventTypes.load,topMouseDown:eventTypes.mouseDown,topMouseMove:eventTypes.mouseMove,topMouseOut:eventTypes.mouseOut,topMouseOver:eventTypes.mouseOver,topMouseUp:eventTypes.mouseUp,topPaste:eventTypes.paste,topReset:eventTypes.reset,topScroll:eventTypes.scroll,topSubmit:eventTypes.submit,topTouchCancel:eventTypes.touchCancel,topTouchEnd:eventTypes.touchEnd,topTouchMove:eventTypes.touchMove,topTouchStart:eventTypes.touchStart,topWheel:eventTypes.wheel}; for (var type in topLevelEventsToDispatchConfig){:topLevelEventsToDispatchConfig[type].dependencies =[type]}var SimpleEventPlugin ={("production" !== "development" ? warning(typeof returnValue !== 'boolean','Returning `false` from an event handler is deprecated and will be ' + 'ignored in a future release. Instead, manually call ' + 'e.stopPropagation() or e.preventDefault(), as appropriate.'):null);:event.preventDefault()},extractEvents: function( topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){:var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType]}var EventConstructor; switch (topLevelType){case topLevelTypes.topInput:case topLevelTypes.topLoad:case topLevelTypes.topError:case topLevelTypes.topReset:case topLevelTypes.topSubmit:// HTML Events // @see http://www.w3org/TR/html5/index.html#events-0 EventConstructor = SyntheticEvent;:break},isPersistent: emptyFunction.thatReturnsFalse,destructor: function(){:var Interface = this.constructor.Interface}); SyntheticEvent.Interface = EventInterface; SyntheticEvent.augmentClass = function(Class,Interface){:var Super = this;:var prototype = Object.create(Super.prototype);:assign(prototype,Class.prototype);:Class.prototype = prototype;:Class.prototype.constructor = Class}96:[function(_dereq_,module,exports),]{'use strict':var SyntheticUIEvent = _dereq_(101)}; function SyntheticFocusEvent(dispatchConfig,dispatchMarker,nativeEvent){:SyntheticUIEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}97:[function(_dereq_,module,exports),]{'use strict':var SyntheticEvent = _dereq_(95)}; function SyntheticInputEvent( dispatchConfig,dispatchMarker,nativeEvent){:SyntheticEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}98:[function(_dereq_,module,exports),]{'use strict':var SyntheticUIEvent = _dereq_(101);:var getEventCharCode = _dereq_(122);:var getEventKey = _dereq_(123);:var getEventModifierState = _dereq_(124)},keyCode: function(event){// `keyCode` is the result of a KeyDown/Up event and represents the value of // physical keyboard key. // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"101":101,"122":122,"123":123,"124":124}],99:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = _dereq_(101);
var ViewportMetrics = _dereq_(104);

var getEventModifierState = _dereq_(124);

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"101":101,"104":104,"124":124}],100:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = _dereq_(101);

var getEventModifierState = _dereq_(124);

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"101":101,"124":124}],101:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = _dereq_(95);

var getEventTarget = _dereq_(125);

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"125":125,"95":95}],102:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = _dereq_(99);

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"99":99}],103:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

'use strict';

var invariant = _dereq_(135);

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== "development" ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...):Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block,it means // one of these calls threw. errorThrown = true;:this.initializeAll(0);:ret = method.call(scope,a,b,c,d,e,f);:errorThrown = false}finally{:this._isInTransaction = false},initializeAll: function(startIndex){:var transactionWrappers = this.transactionWrappers;:for(var i = startIndex;:i < transactionWrappers.length}104:[function(_dereq_,module,exports),]{'use strict':ViewportMetrics.currentScrollTop = scrollPosition.y}105:[function(_dereq_,module,exports),]{'use strict':var invariant = _dereq_(135)}// Both are not empty. Warning: Never call x.concat(y) when you are not // certain that x is an Array (x could be a string with concat method). var currentIsArray = Array.isArray(current); var nextIsArray = Array.isArray(next); if (currentIsArray && nextIsArray){:current.push.apply(current,next);:return current}if (currentIsArray){:current.push(next);:return current}if (nextIsArray){:// A bit too dangerous to mutate `next`. return[current].concat(next)}106:[function(_dereq_,module,exports),]{'use strict':var MOD = 65521;:var b = 0;:for(var i = 0;:i < data.length;:b =(b + a)% MOD}107:[function(_dereq_,module,exports),]{:var _hyphenPattern = /-(.)/g}108:[function(_dereq_,module,exports),]{"use strict":var camelize = _dereq_(107);:var msPattern = /^-ms-/}109:[function(_dereq_,module,exports),]{:var isTextNode = _dereq_(139)}else if (outerNode === innerNode){:return true}else if (isTextNode(outerNode)){:return false}else if (isTextNode(innerNode)){:return containsNode(outerNode,innerNode.parentNode)}else if (outerNode.contains){:return outerNode.contains(innerNode)}else if (outerNode.compareDocumentPosition){:return !!(outerNode.compareDocumentPosition(innerNode)& 16)}110:[function(_dereq_,module,exports),]{:var toArray = _dereq_(152)}else if (Array.isArray(obj)){:return obj.slice()}111:[function(_dereq_,module,exports),]{'use strict':// Defeat circular references by requiring this directly. var ReactClass = _dereq_(33);:var ReactElement = _dereq_(57);:var invariant = _dereq_(135)},render: function(){:return elementFactory(this.props)}112:[function(_dereq_,module,exports),]{:var ExecutionEnvironment = _dereq_(21);:var createArrayFromMixed = _dereq_(110);:var getMarkupWrap = _dereq_(127);:var invariant = _dereq_(135);var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div'):null;:var nodeNamePattern = /^\s*<(\w+)/;:return nodeNameMatch && nodeNameMatch[1].toLowerCase()}function createNodesFromMarkup(markup,handleScript){:var node = dummyNode;("production" !== "development" ? invariant(!!dummyNode,'createNodesFromMarkup dummy not initialized'):invariant(!!dummyNode));:var nodeName = getNodeName(markup);:var wrap = nodeName && getMarkupWrap(nodeName);:var wrapDepth = wrap[0]}var scripts = node.getElementsByTagName('script'); if (scripts.length){("production" !== "development" ? invariant(handleScript,'createNodesFromMarkup(...): Unexpected <script> element rendered.'):invariant(handleScript));:createArrayFromMixed(scripts).forEach(handleScript)}var nodes = createArrayFromMixed(node.childNodes); while (node.lastChild){:node.removeChild(node.lastChild)}