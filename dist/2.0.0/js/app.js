/*! modernizr 3.0.0-alpha.3 (Custom Build) | MIT *
 * http://v3.modernizr.com/download/#-cssmask !*/
!function (e, n, t) {
    function r(e) {
        var n = g.className,
            t = Modernizr._config.classPrefix || "";if (Modernizr._config.enableJSClass) {
            var r = new RegExp("(^|\\s)" + t + "no-js(\\s|$)");n = n.replace(r, "$1" + t + "js$2");
        }Modernizr._config.enableClasses && (n += " " + t + e.join(" " + t), g.className = n);
    }function o(e, n) {
        return typeof e === n;
    }function i() {
        var e, n, t, r, i, s, a;for (var f in C) {
            if (e = [], n = C[f], n.name && (e.push(n.name.toLowerCase()), n.options && n.options.aliases && n.options.aliases.length)) for (t = 0; t < n.options.aliases.length; t++) e.push(n.options.aliases[t].toLowerCase());for (r = o(n.fn, "function") ? n.fn() : n.fn, i = 0; i < e.length; i++) s = e[i], a = s.split("."), 1 === a.length ? Modernizr[a[0]] = r : (!Modernizr[a[0]] || Modernizr[a[0]] instanceof Boolean || (Modernizr[a[0]] = new Boolean(Modernizr[a[0]])), Modernizr[a[0]][a[1]] = r), h.push((r ? "" : "no-") + a.join("-"));
        }
    }function s(e, n) {
        return !!~("" + e).indexOf(n);
    }function a(e) {
        return e.replace(/([a-z])-([a-z])/g, function (e, n, t) {
            return n + t.toUpperCase();
        }).replace(/^-/, "");
    }function f(e, n) {
        return function () {
            return e.apply(n, arguments);
        };
    }function l(e, n, t) {
        var r;for (var i in e) if (e[i] in n) return t === !1 ? e[i] : (r = n[e[i]], o(r, "function") ? f(r, t || n) : r);return !1;
    }function u(e) {
        return e.replace(/([A-Z])/g, function (e, n) {
            return "-" + n.toLowerCase();
        }).replace(/^ms-/, "-ms-");
    }function d() {
        var e = n.body;return e || (e = b("body"), e.fake = !0), e;
    }function c(e, n, t, r) {
        var o,
            i,
            s,
            a,
            f = "modernizr",
            l = b("div"),
            u = d();if (parseInt(t, 10)) for (; t--;) s = b("div"), s.id = r ? r[t] : f + (t + 1), l.appendChild(s);return o = ["&#173;", '<style id="s', f, '">', e, "</style>"].join(""), l.id = f, (u.fake ? u : l).innerHTML += o, u.appendChild(l), u.fake && (u.style.background = "", u.style.overflow = "hidden", a = g.style.overflow, g.style.overflow = "hidden", g.appendChild(u)), i = n(l, e), u.fake ? (u.parentNode.removeChild(u), g.style.overflow = a, g.offsetHeight) : l.parentNode.removeChild(l), !!i;
    }function p(n, r) {
        var o = n.length;if ("CSS" in e && "supports" in e.CSS) {
            for (; o--;) if (e.CSS.supports(u(n[o]), r)) return !0;return !1;
        }if ("CSSSupportsRule" in e) {
            for (var i = []; o--;) i.push("(" + u(n[o]) + ":" + r + ")");return i = i.join(" or "), c("@supports (" + i + ") { #modernizr { position: absolute; } }", function (e) {
                return "absolute" == getComputedStyle(e, null).position;
            });
        }return t;
    }function m(e, n, r, i) {
        function f() {
            u && (delete E.style, delete E.modElem);
        }if (i = o(i, "undefined") ? !1 : i, !o(r, "undefined")) {
            var l = p(e, r);if (!o(l, "undefined")) return l;
        }var u, d, c, m, v;for (E.style || (u = !0, E.modElem = b("modernizr"), E.style = E.modElem.style), c = e.length, d = 0; c > d; d++) if (m = e[d], v = E.style[m], s(m, "-") && (m = a(m)), E.style[m] !== t) {
            if (i || o(r, "undefined")) return f(), "pfx" == n ? m : !0;try {
                E.style[m] = r;
            } catch (y) {}if (E.style[m] != v) return f(), "pfx" == n ? m : !0;
        }return f(), !1;
    }function v(e, n, t, r, i) {
        var s = e.charAt(0).toUpperCase() + e.slice(1),
            a = (e + " " + S.join(s + " ") + s).split(" ");return o(n, "string") || o(n, "undefined") ? m(a, n, r, i) : (a = (e + " " + x.join(s + " ") + s).split(" "), l(a, n, t));
    }function y(e, n, r) {
        return v(e, t, t, n, r);
    }var h = [],
        g = n.documentElement,
        C = [],
        _ = { _version: "3.0.0-alpha.3", _config: { classPrefix: "", enableClasses: !0, enableJSClass: !0, usePrefixes: !0 }, _q: [], on: function (e, n) {
            var t = this;setTimeout(function () {
                n(t[e]);
            }, 0);
        }, addTest: function (e, n, t) {
            C.push({ name: e, fn: n, options: t });
        }, addAsyncTest: function (e) {
            C.push({ name: null, fn: e });
        } },
        Modernizr = function () {};Modernizr.prototype = _, Modernizr = new Modernizr();var w = "Moz O ms Webkit",
        S = _._config.usePrefixes ? w.split(" ") : [];_._cssomPrefixes = S;var x = _._config.usePrefixes ? w.toLowerCase().split(" ") : [];_._domPrefixes = x;var b = function () {
        return "function" != typeof n.createElement ? n.createElement(arguments[0]) : n.createElement.apply(n, arguments);
    },
        z = { elem: b("modernizr") };Modernizr._q.push(function () {
        delete z.elem;
    });var E = { style: z.elem.style };Modernizr._q.unshift(function () {
        delete E.style;
    }), _.testAllProps = v, _.testAllProps = y, Modernizr.addTest("cssmask", y("maskRepeat", "repeat-x", !0)), i(), r(h), delete _.addTest, delete _.addAsyncTest;for (var P = 0; P < Modernizr._q.length; P++) Modernizr._q[P]();e.Modernizr = Modernizr;
}(window, document);
console.log('Follow the dev of this site at https://github.com/xak/zackfrazier');

/*
 * - smooth-scroll.js -
 * Licence MIT
 * Written by Gabriel DelÃ©pine
 * Version 1.0.1 (2013-11-08)
 * Requirement : No one, it is a framework-free fonction (ie : You do not need to include any other file in your page such as jQuery)
 * Fork-me in github : https://github.com/Yappli/smooth-scroll/
 * */
(function () // Code in a function to create an isolate scope
{
    var speed = 250,
        moving_frequency = 15,
        // Affects performance !
    height_fixed_header = 0,
        // For layout with header with position:fixed. Write here the height of your header for your anchor don't be hiden behind
    links = document.getElementsByTagName('a'),
        href;
    for (var i = 0; i < links.length; i++) {
        href = links[i].attributes.href === undefined ? null : links[i].attributes.href.nodeValue.toString();
        if (href !== null && href.length > 1 && href.substr(0, 1) == '#') {
            links[i].onclick = function () {
                var element;
                var href = this.attributes.href.nodeValue.toString();
                if (element = document.getElementById(href.substr(1))) {
                    var hop_count = speed / moving_frequency;
                    var getScrollTopDocumentAtBegin = getScrollTopDocument();
                    var gap = (getScrollTopElement(element) - getScrollTopDocumentAtBegin - height_fixed_header) / hop_count;

                    for (var i = 1; i <= hop_count; i++) {
                        (function () {
                            var hop_top_position = gap * i;
                            setTimeout(function () {
                                window.scrollTo(0, hop_top_position + getScrollTopDocumentAtBegin);
                            }, moving_frequency * i);
                        })();
                    }
                }

                return false;
            };
        }
    }

    var getScrollTopElement = function (e) {
        var top = 0;

        while (e.offsetParent != undefined && e.offsetParent != null) {
            top += e.offsetTop + (e.clientTop != null ? e.clientTop : 0);
            e = e.offsetParent;
        }

        return top;
    };

    var getScrollTopDocument = function () {
        return document.documentElement.scrollTop + document.body.scrollTop;
    };
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJlIiwibiIsInQiLCJyIiwiZyIsImNsYXNzTmFtZSIsIk1vZGVybml6ciIsIl9jb25maWciLCJjbGFzc1ByZWZpeCIsImVuYWJsZUpTQ2xhc3MiLCJSZWdFeHAiLCJyZXBsYWNlIiwiZW5hYmxlQ2xhc3NlcyIsImpvaW4iLCJvIiwiaSIsInMiLCJhIiwiZiIsIkMiLCJuYW1lIiwicHVzaCIsInRvTG93ZXJDYXNlIiwib3B0aW9ucyIsImFsaWFzZXMiLCJsZW5ndGgiLCJmbiIsInNwbGl0IiwiQm9vbGVhbiIsImgiLCJpbmRleE9mIiwidG9VcHBlckNhc2UiLCJhcHBseSIsImFyZ3VtZW50cyIsImwiLCJ1IiwiZCIsImJvZHkiLCJiIiwiZmFrZSIsImMiLCJwYXJzZUludCIsImlkIiwiYXBwZW5kQ2hpbGQiLCJpbm5lckhUTUwiLCJzdHlsZSIsImJhY2tncm91bmQiLCJvdmVyZmxvdyIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsIm9mZnNldEhlaWdodCIsInAiLCJDU1MiLCJzdXBwb3J0cyIsImdldENvbXB1dGVkU3R5bGUiLCJwb3NpdGlvbiIsIm0iLCJFIiwibW9kRWxlbSIsInYiLCJ5IiwiY2hhckF0Iiwic2xpY2UiLCJTIiwieCIsImRvY3VtZW50RWxlbWVudCIsIl8iLCJfdmVyc2lvbiIsInVzZVByZWZpeGVzIiwiX3EiLCJvbiIsInNldFRpbWVvdXQiLCJhZGRUZXN0IiwiYWRkQXN5bmNUZXN0IiwicHJvdG90eXBlIiwidyIsIl9jc3NvbVByZWZpeGVzIiwiX2RvbVByZWZpeGVzIiwiY3JlYXRlRWxlbWVudCIsInoiLCJlbGVtIiwidW5zaGlmdCIsInRlc3RBbGxQcm9wcyIsIlAiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNvbnNvbGUiLCJsb2ciLCJzcGVlZCIsIm1vdmluZ19mcmVxdWVuY3kiLCJoZWlnaHRfZml4ZWRfaGVhZGVyIiwibGlua3MiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImhyZWYiLCJhdHRyaWJ1dGVzIiwidW5kZWZpbmVkIiwibm9kZVZhbHVlIiwidG9TdHJpbmciLCJzdWJzdHIiLCJvbmNsaWNrIiwiZWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwiaG9wX2NvdW50IiwiZ2V0U2Nyb2xsVG9wRG9jdW1lbnRBdEJlZ2luIiwiZ2V0U2Nyb2xsVG9wRG9jdW1lbnQiLCJnYXAiLCJnZXRTY3JvbGxUb3BFbGVtZW50IiwiaG9wX3RvcF9wb3NpdGlvbiIsInNjcm9sbFRvIiwidG9wIiwib2Zmc2V0UGFyZW50Iiwib2Zmc2V0VG9wIiwiY2xpZW50VG9wIiwic2Nyb2xsVG9wIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxDQUFDLFVBQVNBLENBQVQsRUFBV0MsQ0FBWCxFQUFhQyxDQUFiLEVBQWU7QUFBQyxhQUFTQyxDQUFULENBQVdILENBQVgsRUFBYTtBQUFDLFlBQUlDLElBQUVHLEVBQUVDLFNBQVI7QUFBQSxZQUFrQkgsSUFBRUksVUFBVUMsT0FBVixDQUFrQkMsV0FBbEIsSUFBK0IsRUFBbkQsQ0FBc0QsSUFBR0YsVUFBVUMsT0FBVixDQUFrQkUsYUFBckIsRUFBbUM7QUFBQyxnQkFBSU4sSUFBRSxJQUFJTyxNQUFKLENBQVcsWUFBVVIsQ0FBVixHQUFZLGNBQXZCLENBQU4sQ0FBNkNELElBQUVBLEVBQUVVLE9BQUYsQ0FBVVIsQ0FBVixFQUFZLE9BQUtELENBQUwsR0FBTyxNQUFuQixDQUFGO0FBQTZCLG1CQUFVSyxPQUFWLENBQWtCSyxhQUFsQixLQUFrQ1gsS0FBRyxNQUFJQyxDQUFKLEdBQU1GLEVBQUVhLElBQUYsQ0FBTyxNQUFJWCxDQUFYLENBQVQsRUFBdUJFLEVBQUVDLFNBQUYsR0FBWUosQ0FBckU7QUFBd0UsY0FBU2EsQ0FBVCxDQUFXZCxDQUFYLEVBQWFDLENBQWIsRUFBZTtBQUFDLGVBQU8sT0FBT0QsQ0FBUCxLQUFXQyxDQUFsQjtBQUFvQixjQUFTYyxDQUFULEdBQVk7QUFBQyxZQUFJZixDQUFKLEVBQU1DLENBQU4sRUFBUUMsQ0FBUixFQUFVQyxDQUFWLEVBQVlZLENBQVosRUFBY0MsQ0FBZCxFQUFnQkMsQ0FBaEIsQ0FBa0IsS0FBSSxJQUFJQyxDQUFSLElBQWFDLENBQWIsRUFBZTtBQUFDLGdCQUFHbkIsSUFBRSxFQUFGLEVBQUtDLElBQUVrQixFQUFFRCxDQUFGLENBQVAsRUFBWWpCLEVBQUVtQixJQUFGLEtBQVNwQixFQUFFcUIsSUFBRixDQUFPcEIsRUFBRW1CLElBQUYsQ0FBT0UsV0FBUCxFQUFQLEdBQTZCckIsRUFBRXNCLE9BQUYsSUFBV3RCLEVBQUVzQixPQUFGLENBQVVDLE9BQXJCLElBQThCdkIsRUFBRXNCLE9BQUYsQ0FBVUMsT0FBVixDQUFrQkMsTUFBdEYsQ0FBZixFQUE2RyxLQUFJdkIsSUFBRSxDQUFOLEVBQVFBLElBQUVELEVBQUVzQixPQUFGLENBQVVDLE9BQVYsQ0FBa0JDLE1BQTVCLEVBQW1DdkIsR0FBbkMsRUFBdUNGLEVBQUVxQixJQUFGLENBQU9wQixFQUFFc0IsT0FBRixDQUFVQyxPQUFWLENBQWtCdEIsQ0FBbEIsRUFBcUJvQixXQUFyQixFQUFQLEVBQTJDLEtBQUluQixJQUFFVyxFQUFFYixFQUFFeUIsRUFBSixFQUFPLFVBQVAsSUFBbUJ6QixFQUFFeUIsRUFBRixFQUFuQixHQUEwQnpCLEVBQUV5QixFQUE5QixFQUFpQ1gsSUFBRSxDQUF2QyxFQUF5Q0EsSUFBRWYsRUFBRXlCLE1BQTdDLEVBQW9EVixHQUFwRCxFQUF3REMsSUFBRWhCLEVBQUVlLENBQUYsQ0FBRixFQUFPRSxJQUFFRCxFQUFFVyxLQUFGLENBQVEsR0FBUixDQUFULEVBQXNCLE1BQUlWLEVBQUVRLE1BQU4sR0FBYW5CLFVBQVVXLEVBQUUsQ0FBRixDQUFWLElBQWdCZCxDQUE3QixJQUFnQyxDQUFDRyxVQUFVVyxFQUFFLENBQUYsQ0FBVixDQUFELElBQWtCWCxVQUFVVyxFQUFFLENBQUYsQ0FBVixhQUEwQlcsT0FBNUMsS0FBc0R0QixVQUFVVyxFQUFFLENBQUYsQ0FBVixJQUFnQixJQUFJVyxPQUFKLENBQVl0QixVQUFVVyxFQUFFLENBQUYsQ0FBVixDQUFaLENBQXRFLEdBQW9HWCxVQUFVVyxFQUFFLENBQUYsQ0FBVixFQUFnQkEsRUFBRSxDQUFGLENBQWhCLElBQXNCZCxDQUExSixDQUF0QixFQUFtTDBCLEVBQUVSLElBQUYsQ0FBTyxDQUFDbEIsSUFBRSxFQUFGLEdBQUssS0FBTixJQUFhYyxFQUFFSixJQUFGLENBQU8sR0FBUCxDQUFwQixDQUFuTDtBQUFvTjtBQUFDLGNBQVNHLENBQVQsQ0FBV2hCLENBQVgsRUFBYUMsQ0FBYixFQUFlO0FBQUMsZUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUdELENBQUosRUFBTzhCLE9BQVAsQ0FBZTdCLENBQWYsQ0FBVDtBQUEyQixjQUFTZ0IsQ0FBVCxDQUFXakIsQ0FBWCxFQUFhO0FBQUMsZUFBT0EsRUFBRVcsT0FBRixDQUFVLGtCQUFWLEVBQTZCLFVBQVNYLENBQVQsRUFBV0MsQ0FBWCxFQUFhQyxDQUFiLEVBQWU7QUFBQyxtQkFBT0QsSUFBRUMsRUFBRTZCLFdBQUYsRUFBVDtBQUF5QixTQUF0RSxFQUF3RXBCLE9BQXhFLENBQWdGLElBQWhGLEVBQXFGLEVBQXJGLENBQVA7QUFBZ0csY0FBU08sQ0FBVCxDQUFXbEIsQ0FBWCxFQUFhQyxDQUFiLEVBQWU7QUFBQyxlQUFPLFlBQVU7QUFBQyxtQkFBT0QsRUFBRWdDLEtBQUYsQ0FBUS9CLENBQVIsRUFBVWdDLFNBQVYsQ0FBUDtBQUE0QixTQUE5QztBQUErQyxjQUFTQyxDQUFULENBQVdsQyxDQUFYLEVBQWFDLENBQWIsRUFBZUMsQ0FBZixFQUFpQjtBQUFDLFlBQUlDLENBQUosQ0FBTSxLQUFJLElBQUlZLENBQVIsSUFBYWYsQ0FBYixFQUFlLElBQUdBLEVBQUVlLENBQUYsS0FBT2QsQ0FBVixFQUFZLE9BQU9DLE1BQUksQ0FBQyxDQUFMLEdBQU9GLEVBQUVlLENBQUYsQ0FBUCxJQUFhWixJQUFFRixFQUFFRCxFQUFFZSxDQUFGLENBQUYsQ0FBRixFQUFVRCxFQUFFWCxDQUFGLEVBQUksVUFBSixJQUFnQmUsRUFBRWYsQ0FBRixFQUFJRCxLQUFHRCxDQUFQLENBQWhCLEdBQTBCRSxDQUFqRCxDQUFQLENBQTJELE9BQU0sQ0FBQyxDQUFQO0FBQVMsY0FBU2dDLENBQVQsQ0FBV25DLENBQVgsRUFBYTtBQUFDLGVBQU9BLEVBQUVXLE9BQUYsQ0FBVSxVQUFWLEVBQXFCLFVBQVNYLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUMsbUJBQU0sTUFBSUEsRUFBRXFCLFdBQUYsRUFBVjtBQUEwQixTQUE3RCxFQUErRFgsT0FBL0QsQ0FBdUUsTUFBdkUsRUFBOEUsTUFBOUUsQ0FBUDtBQUE2RixjQUFTeUIsQ0FBVCxHQUFZO0FBQUMsWUFBSXBDLElBQUVDLEVBQUVvQyxJQUFSLENBQWEsT0FBT3JDLE1BQUlBLElBQUVzQyxFQUFFLE1BQUYsQ0FBRixFQUFZdEMsRUFBRXVDLElBQUYsR0FBTyxDQUFDLENBQXhCLEdBQTJCdkMsQ0FBbEM7QUFBb0MsY0FBU3dDLENBQVQsQ0FBV3hDLENBQVgsRUFBYUMsQ0FBYixFQUFlQyxDQUFmLEVBQWlCQyxDQUFqQixFQUFtQjtBQUFDLFlBQUlXLENBQUo7QUFBQSxZQUFNQyxDQUFOO0FBQUEsWUFBUUMsQ0FBUjtBQUFBLFlBQVVDLENBQVY7QUFBQSxZQUFZQyxJQUFFLFdBQWQ7QUFBQSxZQUEwQmdCLElBQUVJLEVBQUUsS0FBRixDQUE1QjtBQUFBLFlBQXFDSCxJQUFFQyxHQUF2QyxDQUEyQyxJQUFHSyxTQUFTdkMsQ0FBVCxFQUFXLEVBQVgsQ0FBSCxFQUFrQixPQUFLQSxHQUFMLEdBQVVjLElBQUVzQixFQUFFLEtBQUYsQ0FBRixFQUFXdEIsRUFBRTBCLEVBQUYsR0FBS3ZDLElBQUVBLEVBQUVELENBQUYsQ0FBRixHQUFPZ0IsS0FBR2hCLElBQUUsQ0FBTCxDQUF2QixFQUErQmdDLEVBQUVTLFdBQUYsQ0FBYzNCLENBQWQsQ0FBL0IsQ0FBZ0QsT0FBT0YsSUFBRSxDQUFDLFFBQUQsRUFBVSxjQUFWLEVBQXlCSSxDQUF6QixFQUEyQixJQUEzQixFQUFnQ2xCLENBQWhDLEVBQWtDLFVBQWxDLEVBQThDYSxJQUE5QyxDQUFtRCxFQUFuRCxDQUFGLEVBQXlEcUIsRUFBRVEsRUFBRixHQUFLeEIsQ0FBOUQsRUFBZ0UsQ0FBQ2lCLEVBQUVJLElBQUYsR0FBT0osQ0FBUCxHQUFTRCxDQUFWLEVBQWFVLFNBQWIsSUFBd0I5QixDQUF4RixFQUEwRnFCLEVBQUVRLFdBQUYsQ0FBY1QsQ0FBZCxDQUExRixFQUEyR0MsRUFBRUksSUFBRixLQUFTSixFQUFFVSxLQUFGLENBQVFDLFVBQVIsR0FBbUIsRUFBbkIsRUFBc0JYLEVBQUVVLEtBQUYsQ0FBUUUsUUFBUixHQUFpQixRQUF2QyxFQUFnRDlCLElBQUViLEVBQUV5QyxLQUFGLENBQVFFLFFBQTFELEVBQW1FM0MsRUFBRXlDLEtBQUYsQ0FBUUUsUUFBUixHQUFpQixRQUFwRixFQUE2RjNDLEVBQUV1QyxXQUFGLENBQWNSLENBQWQsQ0FBdEcsQ0FBM0csRUFBbU9wQixJQUFFZCxFQUFFaUMsQ0FBRixFQUFJbEMsQ0FBSixDQUFyTyxFQUE0T21DLEVBQUVJLElBQUYsSUFBUUosRUFBRWEsVUFBRixDQUFhQyxXQUFiLENBQXlCZCxDQUF6QixHQUE0Qi9CLEVBQUV5QyxLQUFGLENBQVFFLFFBQVIsR0FBaUI5QixDQUE3QyxFQUErQ2IsRUFBRThDLFlBQXpELElBQXVFaEIsRUFBRWMsVUFBRixDQUFhQyxXQUFiLENBQXlCZixDQUF6QixDQUFuVCxFQUErVSxDQUFDLENBQUNuQixDQUF4VjtBQUEwVixjQUFTb0MsQ0FBVCxDQUFXbEQsQ0FBWCxFQUFhRSxDQUFiLEVBQWU7QUFBQyxZQUFJVyxJQUFFYixFQUFFd0IsTUFBUixDQUFlLElBQUcsU0FBUXpCLENBQVIsSUFBVyxjQUFhQSxFQUFFb0QsR0FBN0IsRUFBaUM7QUFBQyxtQkFBS3RDLEdBQUwsR0FBVSxJQUFHZCxFQUFFb0QsR0FBRixDQUFNQyxRQUFOLENBQWVsQixFQUFFbEMsRUFBRWEsQ0FBRixDQUFGLENBQWYsRUFBdUJYLENBQXZCLENBQUgsRUFBNkIsT0FBTSxDQUFDLENBQVAsQ0FBUyxPQUFNLENBQUMsQ0FBUDtBQUFTLGFBQUcscUJBQW9CSCxDQUF2QixFQUF5QjtBQUFDLGlCQUFJLElBQUllLElBQUUsRUFBVixFQUFhRCxHQUFiLEdBQWtCQyxFQUFFTSxJQUFGLENBQU8sTUFBSWMsRUFBRWxDLEVBQUVhLENBQUYsQ0FBRixDQUFKLEdBQVksR0FBWixHQUFnQlgsQ0FBaEIsR0FBa0IsR0FBekIsRUFBOEIsT0FBT1ksSUFBRUEsRUFBRUYsSUFBRixDQUFPLE1BQVAsQ0FBRixFQUFpQjJCLEVBQUUsZ0JBQWN6QixDQUFkLEdBQWdCLDBDQUFsQixFQUE2RCxVQUFTZixDQUFULEVBQVc7QUFBQyx1QkFBTSxjQUFZc0QsaUJBQWlCdEQsQ0FBakIsRUFBbUIsSUFBbkIsRUFBeUJ1RCxRQUEzQztBQUFvRCxhQUE3SCxDQUF4QjtBQUF1SixnQkFBT3JELENBQVA7QUFBUyxjQUFTc0QsQ0FBVCxDQUFXeEQsQ0FBWCxFQUFhQyxDQUFiLEVBQWVFLENBQWYsRUFBaUJZLENBQWpCLEVBQW1CO0FBQUMsaUJBQVNHLENBQVQsR0FBWTtBQUFDaUIsa0JBQUksT0FBT3NCLEVBQUVaLEtBQVQsRUFBZSxPQUFPWSxFQUFFQyxPQUE1QjtBQUFxQyxhQUFHM0MsSUFBRUQsRUFBRUMsQ0FBRixFQUFJLFdBQUosSUFBaUIsQ0FBQyxDQUFsQixHQUFvQkEsQ0FBdEIsRUFBd0IsQ0FBQ0QsRUFBRVgsQ0FBRixFQUFJLFdBQUosQ0FBNUIsRUFBNkM7QUFBQyxnQkFBSStCLElBQUVpQixFQUFFbkQsQ0FBRixFQUFJRyxDQUFKLENBQU4sQ0FBYSxJQUFHLENBQUNXLEVBQUVvQixDQUFGLEVBQUksV0FBSixDQUFKLEVBQXFCLE9BQU9BLENBQVA7QUFBUyxhQUFJQyxDQUFKLEVBQU1DLENBQU4sRUFBUUksQ0FBUixFQUFVZ0IsQ0FBVixFQUFZRyxDQUFaLENBQWMsS0FBSUYsRUFBRVosS0FBRixLQUFVVixJQUFFLENBQUMsQ0FBSCxFQUFLc0IsRUFBRUMsT0FBRixHQUFVcEIsRUFBRSxXQUFGLENBQWYsRUFBOEJtQixFQUFFWixLQUFGLEdBQVFZLEVBQUVDLE9BQUYsQ0FBVWIsS0FBMUQsR0FBaUVMLElBQUV4QyxFQUFFeUIsTUFBckUsRUFBNEVXLElBQUUsQ0FBbEYsRUFBb0ZJLElBQUVKLENBQXRGLEVBQXdGQSxHQUF4RixFQUE0RixJQUFHb0IsSUFBRXhELEVBQUVvQyxDQUFGLENBQUYsRUFBT3VCLElBQUVGLEVBQUVaLEtBQUYsQ0FBUVcsQ0FBUixDQUFULEVBQW9CeEMsRUFBRXdDLENBQUYsRUFBSSxHQUFKLE1BQVdBLElBQUV2QyxFQUFFdUMsQ0FBRixDQUFiLENBQXBCLEVBQXVDQyxFQUFFWixLQUFGLENBQVFXLENBQVIsTUFBYXRELENBQXZELEVBQXlEO0FBQUMsZ0JBQUdhLEtBQUdELEVBQUVYLENBQUYsRUFBSSxXQUFKLENBQU4sRUFBdUIsT0FBT2UsS0FBSSxTQUFPakIsQ0FBUCxHQUFTdUQsQ0FBVCxHQUFXLENBQUMsQ0FBdkIsQ0FBeUIsSUFBRztBQUFDQyxrQkFBRVosS0FBRixDQUFRVyxDQUFSLElBQVdyRCxDQUFYO0FBQWEsYUFBakIsQ0FBaUIsT0FBTXlELENBQU4sRUFBUSxDQUFFLEtBQUdILEVBQUVaLEtBQUYsQ0FBUVcsQ0FBUixLQUFZRyxDQUFmLEVBQWlCLE9BQU96QyxLQUFJLFNBQU9qQixDQUFQLEdBQVN1RCxDQUFULEdBQVcsQ0FBQyxDQUF2QjtBQUF5QixnQkFBT3RDLEtBQUksQ0FBQyxDQUFaO0FBQWMsY0FBU3lDLENBQVQsQ0FBVzNELENBQVgsRUFBYUMsQ0FBYixFQUFlQyxDQUFmLEVBQWlCQyxDQUFqQixFQUFtQlksQ0FBbkIsRUFBcUI7QUFBQyxZQUFJQyxJQUFFaEIsRUFBRTZELE1BQUYsQ0FBUyxDQUFULEVBQVk5QixXQUFaLEtBQTBCL0IsRUFBRThELEtBQUYsQ0FBUSxDQUFSLENBQWhDO0FBQUEsWUFBMkM3QyxJQUFFLENBQUNqQixJQUFFLEdBQUYsR0FBTStELEVBQUVsRCxJQUFGLENBQU9HLElBQUUsR0FBVCxDQUFOLEdBQW9CQSxDQUFyQixFQUF3QlcsS0FBeEIsQ0FBOEIsR0FBOUIsQ0FBN0MsQ0FBZ0YsT0FBT2IsRUFBRWIsQ0FBRixFQUFJLFFBQUosS0FBZWEsRUFBRWIsQ0FBRixFQUFJLFdBQUosQ0FBZixHQUFnQ3VELEVBQUV2QyxDQUFGLEVBQUloQixDQUFKLEVBQU1FLENBQU4sRUFBUVksQ0FBUixDQUFoQyxJQUE0Q0UsSUFBRSxDQUFDakIsSUFBRSxHQUFGLEdBQU1nRSxFQUFFbkQsSUFBRixDQUFPRyxJQUFFLEdBQVQsQ0FBTixHQUFvQkEsQ0FBckIsRUFBd0JXLEtBQXhCLENBQThCLEdBQTlCLENBQUYsRUFBcUNPLEVBQUVqQixDQUFGLEVBQUloQixDQUFKLEVBQU1DLENBQU4sQ0FBakYsQ0FBUDtBQUFrRyxjQUFTMEQsQ0FBVCxDQUFXNUQsQ0FBWCxFQUFhQyxDQUFiLEVBQWVFLENBQWYsRUFBaUI7QUFBQyxlQUFPd0QsRUFBRTNELENBQUYsRUFBSUUsQ0FBSixFQUFNQSxDQUFOLEVBQVFELENBQVIsRUFBVUUsQ0FBVixDQUFQO0FBQW9CLFNBQUkwQixJQUFFLEVBQU47QUFBQSxRQUFTekIsSUFBRUgsRUFBRWdFLGVBQWI7QUFBQSxRQUE2QjlDLElBQUUsRUFBL0I7QUFBQSxRQUFrQytDLElBQUUsRUFBQ0MsVUFBUyxlQUFWLEVBQTBCNUQsU0FBUSxFQUFDQyxhQUFZLEVBQWIsRUFBZ0JJLGVBQWMsQ0FBQyxDQUEvQixFQUFpQ0gsZUFBYyxDQUFDLENBQWhELEVBQWtEMkQsYUFBWSxDQUFDLENBQS9ELEVBQWxDLEVBQW9HQyxJQUFHLEVBQXZHLEVBQTBHQyxJQUFHLFVBQVN0RSxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLGdCQUFJQyxJQUFFLElBQU4sQ0FBV3FFLFdBQVcsWUFBVTtBQUFDdEUsa0JBQUVDLEVBQUVGLENBQUYsQ0FBRjtBQUFRLGFBQTlCLEVBQStCLENBQS9CO0FBQWtDLFNBQXhLLEVBQXlLd0UsU0FBUSxVQUFTeEUsQ0FBVCxFQUFXQyxDQUFYLEVBQWFDLENBQWIsRUFBZTtBQUFDaUIsY0FBRUUsSUFBRixDQUFPLEVBQUNELE1BQUtwQixDQUFOLEVBQVEwQixJQUFHekIsQ0FBWCxFQUFhc0IsU0FBUXJCLENBQXJCLEVBQVA7QUFBZ0MsU0FBak8sRUFBa091RSxjQUFhLFVBQVN6RSxDQUFULEVBQVc7QUFBQ21CLGNBQUVFLElBQUYsQ0FBTyxFQUFDRCxNQUFLLElBQU4sRUFBV00sSUFBRzFCLENBQWQsRUFBUDtBQUF5QixTQUFwUixFQUFwQztBQUFBLFFBQTBUTSxZQUFVLFlBQVUsQ0FBRSxDQUFoVixDQUFpVkEsVUFBVW9FLFNBQVYsR0FBb0JSLENBQXBCLEVBQXNCNUQsWUFBVSxJQUFJQSxTQUFKLEVBQWhDLENBQThDLElBQUlxRSxJQUFFLGlCQUFOO0FBQUEsUUFBd0JaLElBQUVHLEVBQUUzRCxPQUFGLENBQVU2RCxXQUFWLEdBQXNCTyxFQUFFaEQsS0FBRixDQUFRLEdBQVIsQ0FBdEIsR0FBbUMsRUFBN0QsQ0FBZ0V1QyxFQUFFVSxjQUFGLEdBQWlCYixDQUFqQixDQUFtQixJQUFJQyxJQUFFRSxFQUFFM0QsT0FBRixDQUFVNkQsV0FBVixHQUFzQk8sRUFBRXJELFdBQUYsR0FBZ0JLLEtBQWhCLENBQXNCLEdBQXRCLENBQXRCLEdBQWlELEVBQXZELENBQTBEdUMsRUFBRVcsWUFBRixHQUFlYixDQUFmLENBQWlCLElBQUkxQixJQUFFLFlBQVU7QUFBQyxlQUFNLGNBQVksT0FBT3JDLEVBQUU2RSxhQUFyQixHQUFtQzdFLEVBQUU2RSxhQUFGLENBQWdCN0MsVUFBVSxDQUFWLENBQWhCLENBQW5DLEdBQWlFaEMsRUFBRTZFLGFBQUYsQ0FBZ0I5QyxLQUFoQixDQUFzQi9CLENBQXRCLEVBQXdCZ0MsU0FBeEIsQ0FBdkU7QUFBMEcsS0FBM0g7QUFBQSxRQUE0SDhDLElBQUUsRUFBQ0MsTUFBSzFDLEVBQUUsV0FBRixDQUFOLEVBQTlILENBQW9KaEMsVUFBVStELEVBQVYsQ0FBYWhELElBQWIsQ0FBa0IsWUFBVTtBQUFDLGVBQU8wRCxFQUFFQyxJQUFUO0FBQWMsS0FBM0MsRUFBNkMsSUFBSXZCLElBQUUsRUFBQ1osT0FBTWtDLEVBQUVDLElBQUYsQ0FBT25DLEtBQWQsRUFBTixDQUEyQnZDLFVBQVUrRCxFQUFWLENBQWFZLE9BQWIsQ0FBcUIsWUFBVTtBQUFDLGVBQU94QixFQUFFWixLQUFUO0FBQWUsS0FBL0MsR0FBaURxQixFQUFFZ0IsWUFBRixHQUFldkIsQ0FBaEUsRUFBa0VPLEVBQUVnQixZQUFGLEdBQWV0QixDQUFqRixFQUFtRnRELFVBQVVrRSxPQUFWLENBQWtCLFNBQWxCLEVBQTRCWixFQUFFLFlBQUYsRUFBZSxVQUFmLEVBQTBCLENBQUMsQ0FBM0IsQ0FBNUIsQ0FBbkYsRUFBOEk3QyxHQUE5SSxFQUFrSlosRUFBRTBCLENBQUYsQ0FBbEosRUFBdUosT0FBT3FDLEVBQUVNLE9BQWhLLEVBQXdLLE9BQU9OLEVBQUVPLFlBQWpMLENBQThMLEtBQUksSUFBSVUsSUFBRSxDQUFWLEVBQVlBLElBQUU3RSxVQUFVK0QsRUFBVixDQUFhNUMsTUFBM0IsRUFBa0MwRCxHQUFsQyxFQUFzQzdFLFVBQVUrRCxFQUFWLENBQWFjLENBQWIsSUFBa0JuRixFQUFFTSxTQUFGLEdBQVlBLFNBQVo7QUFBc0IsQ0FBbnlILENBQW95SDhFLE1BQXB5SCxFQUEyeUhDLFFBQTN5SCxDQUFEO0FBQ0FDLFFBQVFDLEdBQVIsQ0FBWSxtRUFBWjs7QUFLQTs7Ozs7Ozs7QUFRQSxDQUFDLFlBQVc7QUFDWjtBQUNJLFFBQUlDLFFBQVEsR0FBWjtBQUFBLFFBQ0lDLG1CQUFtQixFQUR2QjtBQUFBLFFBQzJCO0FBQ3ZCQywwQkFBc0IsQ0FGMUI7QUFBQSxRQUU2QjtBQUN6QkMsWUFBUU4sU0FBU08sb0JBQVQsQ0FBOEIsR0FBOUIsQ0FIWjtBQUFBLFFBSUlDLElBSko7QUFLQSxTQUFJLElBQUk5RSxJQUFFLENBQVYsRUFBYUEsSUFBRTRFLE1BQU1sRSxNQUFyQixFQUE2QlYsR0FBN0IsRUFDQTtBQUNJOEUsZUFBUUYsTUFBTTVFLENBQU4sRUFBUytFLFVBQVQsQ0FBb0JELElBQXBCLEtBQTZCRSxTQUE5QixHQUEyQyxJQUEzQyxHQUFrREosTUFBTTVFLENBQU4sRUFBUytFLFVBQVQsQ0FBb0JELElBQXBCLENBQXlCRyxTQUF6QixDQUFtQ0MsUUFBbkMsRUFBekQ7QUFDQSxZQUFHSixTQUFTLElBQVQsSUFBaUJBLEtBQUtwRSxNQUFMLEdBQWMsQ0FBL0IsSUFBb0NvRSxLQUFLSyxNQUFMLENBQVksQ0FBWixFQUFlLENBQWYsS0FBcUIsR0FBNUQsRUFDQTtBQUNJUCxrQkFBTTVFLENBQU4sRUFBU29GLE9BQVQsR0FBbUIsWUFDbkI7QUFDSSxvQkFBSUMsT0FBSjtBQUNBLG9CQUFJUCxPQUFPLEtBQUtDLFVBQUwsQ0FBZ0JELElBQWhCLENBQXFCRyxTQUFyQixDQUErQkMsUUFBL0IsRUFBWDtBQUNBLG9CQUFHRyxVQUFVZixTQUFTZ0IsY0FBVCxDQUF3QlIsS0FBS0ssTUFBTCxDQUFZLENBQVosQ0FBeEIsQ0FBYixFQUNBO0FBQ0ksd0JBQUlJLFlBQVlkLFFBQU1DLGdCQUF0QjtBQUNBLHdCQUFJYyw4QkFBOEJDLHNCQUFsQztBQUNBLHdCQUFJQyxNQUFNLENBQUNDLG9CQUFvQk4sT0FBcEIsSUFBK0JHLDJCQUEvQixHQUE2RGIsbUJBQTlELElBQXFGWSxTQUEvRjs7QUFFQSx5QkFBSSxJQUFJdkYsSUFBSSxDQUFaLEVBQWVBLEtBQUt1RixTQUFwQixFQUErQnZGLEdBQS9CLEVBQ0E7QUFDSSx5QkFBQyxZQUNEO0FBQ0ksZ0NBQUk0RixtQkFBbUJGLE1BQUkxRixDQUEzQjtBQUNBd0QsdUNBQVcsWUFBVTtBQUFHYSx1Q0FBT3dCLFFBQVAsQ0FBZ0IsQ0FBaEIsRUFBbUJELG1CQUFtQkosMkJBQXRDO0FBQXFFLDZCQUE3RixFQUErRmQsbUJBQWlCMUUsQ0FBaEg7QUFDSCx5QkFKRDtBQUtIO0FBQ0o7O0FBRUQsdUJBQU8sS0FBUDtBQUNILGFBckJEO0FBc0JIO0FBQ0o7O0FBRUQsUUFBSTJGLHNCQUF1QixVQUFVMUcsQ0FBVixFQUMzQjtBQUNJLFlBQUk2RyxNQUFNLENBQVY7O0FBRUEsZUFBTzdHLEVBQUU4RyxZQUFGLElBQWtCZixTQUFsQixJQUErQi9GLEVBQUU4RyxZQUFGLElBQWtCLElBQXhELEVBQ0E7QUFDSUQsbUJBQU83RyxFQUFFK0csU0FBRixJQUFlL0csRUFBRWdILFNBQUYsSUFBZSxJQUFmLEdBQXNCaEgsRUFBRWdILFNBQXhCLEdBQW9DLENBQW5ELENBQVA7QUFDQWhILGdCQUFJQSxFQUFFOEcsWUFBTjtBQUNIOztBQUVELGVBQU9ELEdBQVA7QUFDSCxLQVhEOztBQWFBLFFBQUlMLHVCQUF1QixZQUMzQjtBQUNJLGVBQU9uQixTQUFTcEIsZUFBVCxDQUF5QmdELFNBQXpCLEdBQXFDNUIsU0FBU2hELElBQVQsQ0FBYzRFLFNBQTFEO0FBQ0gsS0FIRDtBQUlILENBdEREIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qISBtb2Rlcm5penIgMy4wLjAtYWxwaGEuMyAoQ3VzdG9tIEJ1aWxkKSB8IE1JVCAqXG4gKiBodHRwOi8vdjMubW9kZXJuaXpyLmNvbS9kb3dubG9hZC8jLWNzc21hc2sgISovXG4hZnVuY3Rpb24oZSxuLHQpe2Z1bmN0aW9uIHIoZSl7dmFyIG49Zy5jbGFzc05hbWUsdD1Nb2Rlcm5penIuX2NvbmZpZy5jbGFzc1ByZWZpeHx8XCJcIjtpZihNb2Rlcm5penIuX2NvbmZpZy5lbmFibGVKU0NsYXNzKXt2YXIgcj1uZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIrdCtcIm5vLWpzKFxcXFxzfCQpXCIpO249bi5yZXBsYWNlKHIsXCIkMVwiK3QrXCJqcyQyXCIpfU1vZGVybml6ci5fY29uZmlnLmVuYWJsZUNsYXNzZXMmJihuKz1cIiBcIit0K2Uuam9pbihcIiBcIit0KSxnLmNsYXNzTmFtZT1uKX1mdW5jdGlvbiBvKGUsbil7cmV0dXJuIHR5cGVvZiBlPT09bn1mdW5jdGlvbiBpKCl7dmFyIGUsbix0LHIsaSxzLGE7Zm9yKHZhciBmIGluIEMpe2lmKGU9W10sbj1DW2ZdLG4ubmFtZSYmKGUucHVzaChuLm5hbWUudG9Mb3dlckNhc2UoKSksbi5vcHRpb25zJiZuLm9wdGlvbnMuYWxpYXNlcyYmbi5vcHRpb25zLmFsaWFzZXMubGVuZ3RoKSlmb3IodD0wO3Q8bi5vcHRpb25zLmFsaWFzZXMubGVuZ3RoO3QrKyllLnB1c2gobi5vcHRpb25zLmFsaWFzZXNbdF0udG9Mb3dlckNhc2UoKSk7Zm9yKHI9byhuLmZuLFwiZnVuY3Rpb25cIik/bi5mbigpOm4uZm4saT0wO2k8ZS5sZW5ndGg7aSsrKXM9ZVtpXSxhPXMuc3BsaXQoXCIuXCIpLDE9PT1hLmxlbmd0aD9Nb2Rlcm5penJbYVswXV09cjooIU1vZGVybml6clthWzBdXXx8TW9kZXJuaXpyW2FbMF1daW5zdGFuY2VvZiBCb29sZWFufHwoTW9kZXJuaXpyW2FbMF1dPW5ldyBCb29sZWFuKE1vZGVybml6clthWzBdXSkpLE1vZGVybml6clthWzBdXVthWzFdXT1yKSxoLnB1c2goKHI/XCJcIjpcIm5vLVwiKSthLmpvaW4oXCItXCIpKX19ZnVuY3Rpb24gcyhlLG4pe3JldHVybiEhfihcIlwiK2UpLmluZGV4T2Yobil9ZnVuY3Rpb24gYShlKXtyZXR1cm4gZS5yZXBsYWNlKC8oW2Etel0pLShbYS16XSkvZyxmdW5jdGlvbihlLG4sdCl7cmV0dXJuIG4rdC50b1VwcGVyQ2FzZSgpfSkucmVwbGFjZSgvXi0vLFwiXCIpfWZ1bmN0aW9uIGYoZSxuKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZS5hcHBseShuLGFyZ3VtZW50cyl9fWZ1bmN0aW9uIGwoZSxuLHQpe3ZhciByO2Zvcih2YXIgaSBpbiBlKWlmKGVbaV1pbiBuKXJldHVybiB0PT09ITE/ZVtpXToocj1uW2VbaV1dLG8ocixcImZ1bmN0aW9uXCIpP2Yocix0fHxuKTpyKTtyZXR1cm4hMX1mdW5jdGlvbiB1KGUpe3JldHVybiBlLnJlcGxhY2UoLyhbQS1aXSkvZyxmdW5jdGlvbihlLG4pe3JldHVyblwiLVwiK24udG9Mb3dlckNhc2UoKX0pLnJlcGxhY2UoL15tcy0vLFwiLW1zLVwiKX1mdW5jdGlvbiBkKCl7dmFyIGU9bi5ib2R5O3JldHVybiBlfHwoZT1iKFwiYm9keVwiKSxlLmZha2U9ITApLGV9ZnVuY3Rpb24gYyhlLG4sdCxyKXt2YXIgbyxpLHMsYSxmPVwibW9kZXJuaXpyXCIsbD1iKFwiZGl2XCIpLHU9ZCgpO2lmKHBhcnNlSW50KHQsMTApKWZvcig7dC0tOylzPWIoXCJkaXZcIikscy5pZD1yP3JbdF06ZisodCsxKSxsLmFwcGVuZENoaWxkKHMpO3JldHVybiBvPVtcIiYjMTczO1wiLCc8c3R5bGUgaWQ9XCJzJyxmLCdcIj4nLGUsXCI8L3N0eWxlPlwiXS5qb2luKFwiXCIpLGwuaWQ9ZiwodS5mYWtlP3U6bCkuaW5uZXJIVE1MKz1vLHUuYXBwZW5kQ2hpbGQobCksdS5mYWtlJiYodS5zdHlsZS5iYWNrZ3JvdW5kPVwiXCIsdS5zdHlsZS5vdmVyZmxvdz1cImhpZGRlblwiLGE9Zy5zdHlsZS5vdmVyZmxvdyxnLnN0eWxlLm92ZXJmbG93PVwiaGlkZGVuXCIsZy5hcHBlbmRDaGlsZCh1KSksaT1uKGwsZSksdS5mYWtlPyh1LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodSksZy5zdHlsZS5vdmVyZmxvdz1hLGcub2Zmc2V0SGVpZ2h0KTpsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobCksISFpfWZ1bmN0aW9uIHAobixyKXt2YXIgbz1uLmxlbmd0aDtpZihcIkNTU1wiaW4gZSYmXCJzdXBwb3J0c1wiaW4gZS5DU1Mpe2Zvcig7by0tOylpZihlLkNTUy5zdXBwb3J0cyh1KG5bb10pLHIpKXJldHVybiEwO3JldHVybiExfWlmKFwiQ1NTU3VwcG9ydHNSdWxlXCJpbiBlKXtmb3IodmFyIGk9W107by0tOylpLnB1c2goXCIoXCIrdShuW29dKStcIjpcIityK1wiKVwiKTtyZXR1cm4gaT1pLmpvaW4oXCIgb3IgXCIpLGMoXCJAc3VwcG9ydHMgKFwiK2krXCIpIHsgI21vZGVybml6ciB7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgfSB9XCIsZnVuY3Rpb24oZSl7cmV0dXJuXCJhYnNvbHV0ZVwiPT1nZXRDb21wdXRlZFN0eWxlKGUsbnVsbCkucG9zaXRpb259KX1yZXR1cm4gdH1mdW5jdGlvbiBtKGUsbixyLGkpe2Z1bmN0aW9uIGYoKXt1JiYoZGVsZXRlIEUuc3R5bGUsZGVsZXRlIEUubW9kRWxlbSl9aWYoaT1vKGksXCJ1bmRlZmluZWRcIik/ITE6aSwhbyhyLFwidW5kZWZpbmVkXCIpKXt2YXIgbD1wKGUscik7aWYoIW8obCxcInVuZGVmaW5lZFwiKSlyZXR1cm4gbH12YXIgdSxkLGMsbSx2O2ZvcihFLnN0eWxlfHwodT0hMCxFLm1vZEVsZW09YihcIm1vZGVybml6clwiKSxFLnN0eWxlPUUubW9kRWxlbS5zdHlsZSksYz1lLmxlbmd0aCxkPTA7Yz5kO2QrKylpZihtPWVbZF0sdj1FLnN0eWxlW21dLHMobSxcIi1cIikmJihtPWEobSkpLEUuc3R5bGVbbV0hPT10KXtpZihpfHxvKHIsXCJ1bmRlZmluZWRcIikpcmV0dXJuIGYoKSxcInBmeFwiPT1uP206ITA7dHJ5e0Uuc3R5bGVbbV09cn1jYXRjaCh5KXt9aWYoRS5zdHlsZVttXSE9dilyZXR1cm4gZigpLFwicGZ4XCI9PW4/bTohMH1yZXR1cm4gZigpLCExfWZ1bmN0aW9uIHYoZSxuLHQscixpKXt2YXIgcz1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSksYT0oZStcIiBcIitTLmpvaW4ocytcIiBcIikrcykuc3BsaXQoXCIgXCIpO3JldHVybiBvKG4sXCJzdHJpbmdcIil8fG8obixcInVuZGVmaW5lZFwiKT9tKGEsbixyLGkpOihhPShlK1wiIFwiK3guam9pbihzK1wiIFwiKStzKS5zcGxpdChcIiBcIiksbChhLG4sdCkpfWZ1bmN0aW9uIHkoZSxuLHIpe3JldHVybiB2KGUsdCx0LG4scil9dmFyIGg9W10sZz1uLmRvY3VtZW50RWxlbWVudCxDPVtdLF89e192ZXJzaW9uOlwiMy4wLjAtYWxwaGEuM1wiLF9jb25maWc6e2NsYXNzUHJlZml4OlwiXCIsZW5hYmxlQ2xhc3NlczohMCxlbmFibGVKU0NsYXNzOiEwLHVzZVByZWZpeGVzOiEwfSxfcTpbXSxvbjpmdW5jdGlvbihlLG4pe3ZhciB0PXRoaXM7c2V0VGltZW91dChmdW5jdGlvbigpe24odFtlXSl9LDApfSxhZGRUZXN0OmZ1bmN0aW9uKGUsbix0KXtDLnB1c2goe25hbWU6ZSxmbjpuLG9wdGlvbnM6dH0pfSxhZGRBc3luY1Rlc3Q6ZnVuY3Rpb24oZSl7Qy5wdXNoKHtuYW1lOm51bGwsZm46ZX0pfX0sTW9kZXJuaXpyPWZ1bmN0aW9uKCl7fTtNb2Rlcm5penIucHJvdG90eXBlPV8sTW9kZXJuaXpyPW5ldyBNb2Rlcm5penI7dmFyIHc9XCJNb3ogTyBtcyBXZWJraXRcIixTPV8uX2NvbmZpZy51c2VQcmVmaXhlcz93LnNwbGl0KFwiIFwiKTpbXTtfLl9jc3NvbVByZWZpeGVzPVM7dmFyIHg9Xy5fY29uZmlnLnVzZVByZWZpeGVzP3cudG9Mb3dlckNhc2UoKS5zcGxpdChcIiBcIik6W107Xy5fZG9tUHJlZml4ZXM9eDt2YXIgYj1mdW5jdGlvbigpe3JldHVyblwiZnVuY3Rpb25cIiE9dHlwZW9mIG4uY3JlYXRlRWxlbWVudD9uLmNyZWF0ZUVsZW1lbnQoYXJndW1lbnRzWzBdKTpuLmNyZWF0ZUVsZW1lbnQuYXBwbHkobixhcmd1bWVudHMpfSx6PXtlbGVtOmIoXCJtb2Rlcm5penJcIil9O01vZGVybml6ci5fcS5wdXNoKGZ1bmN0aW9uKCl7ZGVsZXRlIHouZWxlbX0pO3ZhciBFPXtzdHlsZTp6LmVsZW0uc3R5bGV9O01vZGVybml6ci5fcS51bnNoaWZ0KGZ1bmN0aW9uKCl7ZGVsZXRlIEUuc3R5bGV9KSxfLnRlc3RBbGxQcm9wcz12LF8udGVzdEFsbFByb3BzPXksTW9kZXJuaXpyLmFkZFRlc3QoXCJjc3NtYXNrXCIseShcIm1hc2tSZXBlYXRcIixcInJlcGVhdC14XCIsITApKSxpKCkscihoKSxkZWxldGUgXy5hZGRUZXN0LGRlbGV0ZSBfLmFkZEFzeW5jVGVzdDtmb3IodmFyIFA9MDtQPE1vZGVybml6ci5fcS5sZW5ndGg7UCsrKU1vZGVybml6ci5fcVtQXSgpO2UuTW9kZXJuaXpyPU1vZGVybml6cn0od2luZG93LGRvY3VtZW50KTtcbmNvbnNvbGUubG9nKCdGb2xsb3cgdGhlIGRldiBvZiB0aGlzIHNpdGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL3hhay96YWNrZnJhemllcicpO1xuXG5cblxuXG4vKlxuICogLSBzbW9vdGgtc2Nyb2xsLmpzIC1cbiAqIExpY2VuY2UgTUlUXG4gKiBXcml0dGVuIGJ5IEdhYnJpZWwgRGVsw6lwaW5lXG4gKiBWZXJzaW9uIDEuMC4xICgyMDEzLTExLTA4KVxuICogUmVxdWlyZW1lbnQgOiBObyBvbmUsIGl0IGlzIGEgZnJhbWV3b3JrLWZyZWUgZm9uY3Rpb24gKGllIDogWW91IGRvIG5vdCBuZWVkIHRvIGluY2x1ZGUgYW55IG90aGVyIGZpbGUgaW4geW91ciBwYWdlIHN1Y2ggYXMgalF1ZXJ5KVxuICogRm9yay1tZSBpbiBnaXRodWIgOiBodHRwczovL2dpdGh1Yi5jb20vWWFwcGxpL3Ntb290aC1zY3JvbGwvXG4gKiAqL1xuKGZ1bmN0aW9uKCkgLy8gQ29kZSBpbiBhIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhbiBpc29sYXRlIHNjb3BlXG57XG4gICAgdmFyIHNwZWVkID0gMjUwLFxuICAgICAgICBtb3ZpbmdfZnJlcXVlbmN5ID0gMTUsIC8vIEFmZmVjdHMgcGVyZm9ybWFuY2UgIVxuICAgICAgICBoZWlnaHRfZml4ZWRfaGVhZGVyID0gMCwgLy8gRm9yIGxheW91dCB3aXRoIGhlYWRlciB3aXRoIHBvc2l0aW9uOmZpeGVkLiBXcml0ZSBoZXJlIHRoZSBoZWlnaHQgb2YgeW91ciBoZWFkZXIgZm9yIHlvdXIgYW5jaG9yIGRvbid0IGJlIGhpZGVuIGJlaGluZFxuICAgICAgICBsaW5rcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJyksXG4gICAgICAgIGhyZWY7XG4gICAgZm9yKHZhciBpPTA7IGk8bGlua3MubGVuZ3RoOyBpKyspXG4gICAgeyAgIFxuICAgICAgICBocmVmID0gKGxpbmtzW2ldLmF0dHJpYnV0ZXMuaHJlZiA9PT0gdW5kZWZpbmVkKSA/IG51bGwgOiBsaW5rc1tpXS5hdHRyaWJ1dGVzLmhyZWYubm9kZVZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmKGhyZWYgIT09IG51bGwgJiYgaHJlZi5sZW5ndGggPiAxICYmIGhyZWYuc3Vic3RyKDAsIDEpID09ICcjJylcbiAgICAgICAge1xuICAgICAgICAgICAgbGlua3NbaV0ub25jbGljayA9IGZ1bmN0aW9uKClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudDtcbiAgICAgICAgICAgICAgICB2YXIgaHJlZiA9IHRoaXMuYXR0cmlidXRlcy5ocmVmLm5vZGVWYWx1ZS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGlmKGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChocmVmLnN1YnN0cigxKSkpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaG9wX2NvdW50ID0gc3BlZWQvbW92aW5nX2ZyZXF1ZW5jeVxuICAgICAgICAgICAgICAgICAgICB2YXIgZ2V0U2Nyb2xsVG9wRG9jdW1lbnRBdEJlZ2luID0gZ2V0U2Nyb2xsVG9wRG9jdW1lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdhcCA9IChnZXRTY3JvbGxUb3BFbGVtZW50KGVsZW1lbnQpIC0gZ2V0U2Nyb2xsVG9wRG9jdW1lbnRBdEJlZ2luIC0gaGVpZ2h0X2ZpeGVkX2hlYWRlcikgLyBob3BfY291bnQ7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAxOyBpIDw9IGhvcF9jb3VudDsgaSsrKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24oKVxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBob3BfdG9wX3Bvc2l0aW9uID0gZ2FwKmk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpeyAgd2luZG93LnNjcm9sbFRvKDAsIGhvcF90b3BfcG9zaXRpb24gKyBnZXRTY3JvbGxUb3BEb2N1bWVudEF0QmVnaW4pOyB9LCBtb3ZpbmdfZnJlcXVlbmN5KmkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHZhciBnZXRTY3JvbGxUb3BFbGVtZW50ID0gIGZ1bmN0aW9uIChlKVxuICAgIHtcbiAgICAgICAgdmFyIHRvcCA9IDA7XG5cbiAgICAgICAgd2hpbGUgKGUub2Zmc2V0UGFyZW50ICE9IHVuZGVmaW5lZCAmJiBlLm9mZnNldFBhcmVudCAhPSBudWxsKVxuICAgICAgICB7XG4gICAgICAgICAgICB0b3AgKz0gZS5vZmZzZXRUb3AgKyAoZS5jbGllbnRUb3AgIT0gbnVsbCA/IGUuY2xpZW50VG9wIDogMCk7XG4gICAgICAgICAgICBlID0gZS5vZmZzZXRQYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0b3A7XG4gICAgfTtcbiAgICBcbiAgICB2YXIgZ2V0U2Nyb2xsVG9wRG9jdW1lbnQgPSBmdW5jdGlvbigpXG4gICAge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wO1xuICAgIH07XG59KSgpO1xuXG5cblxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9