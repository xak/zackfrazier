/*! modernizr 3.0.0-alpha.3 (Custom Build) | MIT *
 * http://v3.modernizr.com/download/#-cssmask !*/
!function (e, n, t) {
  function r(e) {
    var n = g.className,
        t = Modernizr._config.classPrefix || "";if (Modernizr._config.enableJSClass) {
      var r = new RegExp("(^|\\s)" + t + "no-js(\\s|$)");n = n.replace(r, "$1" + t + "js$2");
    }Modernizr._config.enableClasses && (n += " " + t + e.join(" " + t), g.className = n);
  }function o(e, n) {
    return typeof e === n;
  }function i() {
    var e, n, t, r, i, s, a;for (var f in C) {
      if (e = [], n = C[f], n.name && (e.push(n.name.toLowerCase()), n.options && n.options.aliases && n.options.aliases.length)) for (t = 0; t < n.options.aliases.length; t++) e.push(n.options.aliases[t].toLowerCase());for (r = o(n.fn, "function") ? n.fn() : n.fn, i = 0; i < e.length; i++) s = e[i], a = s.split("."), 1 === a.length ? Modernizr[a[0]] = r : (!Modernizr[a[0]] || Modernizr[a[0]] instanceof Boolean || (Modernizr[a[0]] = new Boolean(Modernizr[a[0]])), Modernizr[a[0]][a[1]] = r), h.push((r ? "" : "no-") + a.join("-"));
    }
  }function s(e, n) {
    return !!~("" + e).indexOf(n);
  }function a(e) {
    return e.replace(/([a-z])-([a-z])/g, function (e, n, t) {
      return n + t.toUpperCase();
    }).replace(/^-/, "");
  }function f(e, n) {
    return function () {
      return e.apply(n, arguments);
    };
  }function l(e, n, t) {
    var r;for (var i in e) if (e[i] in n) return t === !1 ? e[i] : (r = n[e[i]], o(r, "function") ? f(r, t || n) : r);return !1;
  }function u(e) {
    return e.replace(/([A-Z])/g, function (e, n) {
      return "-" + n.toLowerCase();
    }).replace(/^ms-/, "-ms-");
  }function d() {
    var e = n.body;return e || (e = b("body"), e.fake = !0), e;
  }function c(e, n, t, r) {
    var o,
        i,
        s,
        a,
        f = "modernizr",
        l = b("div"),
        u = d();if (parseInt(t, 10)) for (; t--;) s = b("div"), s.id = r ? r[t] : f + (t + 1), l.appendChild(s);return o = ["&#173;", '<style id="s', f, '">', e, "</style>"].join(""), l.id = f, (u.fake ? u : l).innerHTML += o, u.appendChild(l), u.fake && (u.style.background = "", u.style.overflow = "hidden", a = g.style.overflow, g.style.overflow = "hidden", g.appendChild(u)), i = n(l, e), u.fake ? (u.parentNode.removeChild(u), g.style.overflow = a, g.offsetHeight) : l.parentNode.removeChild(l), !!i;
  }function p(n, r) {
    var o = n.length;if ("CSS" in e && "supports" in e.CSS) {
      for (; o--;) if (e.CSS.supports(u(n[o]), r)) return !0;return !1;
    }if ("CSSSupportsRule" in e) {
      for (var i = []; o--;) i.push("(" + u(n[o]) + ":" + r + ")");return i = i.join(" or "), c("@supports (" + i + ") { #modernizr { position: absolute; } }", function (e) {
        return "absolute" == getComputedStyle(e, null).position;
      });
    }return t;
  }function m(e, n, r, i) {
    function f() {
      u && (delete E.style, delete E.modElem);
    }if (i = o(i, "undefined") ? !1 : i, !o(r, "undefined")) {
      var l = p(e, r);if (!o(l, "undefined")) return l;
    }var u, d, c, m, v;for (E.style || (u = !0, E.modElem = b("modernizr"), E.style = E.modElem.style), c = e.length, d = 0; c > d; d++) if (m = e[d], v = E.style[m], s(m, "-") && (m = a(m)), E.style[m] !== t) {
      if (i || o(r, "undefined")) return f(), "pfx" == n ? m : !0;try {
        E.style[m] = r;
      } catch (y) {}if (E.style[m] != v) return f(), "pfx" == n ? m : !0;
    }return f(), !1;
  }function v(e, n, t, r, i) {
    var s = e.charAt(0).toUpperCase() + e.slice(1),
        a = (e + " " + S.join(s + " ") + s).split(" ");return o(n, "string") || o(n, "undefined") ? m(a, n, r, i) : (a = (e + " " + x.join(s + " ") + s).split(" "), l(a, n, t));
  }function y(e, n, r) {
    return v(e, t, t, n, r);
  }var h = [],
      g = n.documentElement,
      C = [],
      _ = { _version: "3.0.0-alpha.3", _config: { classPrefix: "", enableClasses: !0, enableJSClass: !0, usePrefixes: !0 }, _q: [], on: function (e, n) {
      var t = this;setTimeout(function () {
        n(t[e]);
      }, 0);
    }, addTest: function (e, n, t) {
      C.push({ name: e, fn: n, options: t });
    }, addAsyncTest: function (e) {
      C.push({ name: null, fn: e });
    } },
      Modernizr = function () {};Modernizr.prototype = _, Modernizr = new Modernizr();var w = "Moz O ms Webkit",
      S = _._config.usePrefixes ? w.split(" ") : [];_._cssomPrefixes = S;var x = _._config.usePrefixes ? w.toLowerCase().split(" ") : [];_._domPrefixes = x;var b = function () {
    return "function" != typeof n.createElement ? n.createElement(arguments[0]) : n.createElement.apply(n, arguments);
  },
      z = { elem: b("modernizr") };Modernizr._q.push(function () {
    delete z.elem;
  });var E = { style: z.elem.style };Modernizr._q.unshift(function () {
    delete E.style;
  }), _.testAllProps = v, _.testAllProps = y, Modernizr.addTest("cssmask", y("maskRepeat", "repeat-x", !0)), i(), r(h), delete _.addTest, delete _.addAsyncTest;for (var P = 0; P < Modernizr._q.length; P++) Modernizr._q[P]();e.Modernizr = Modernizr;
}(window, document);
console.log('Follow the dev of this site at https://github.com/xak/zackfrazier');

setTimeout(function () {
  //  var cls = document.getElementById('main').className
  //	document.getElementById('main').className = cls + ' ready';
}, 1500);
//# sourceMappingURL=data:application/json;base64,